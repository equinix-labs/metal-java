/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.equinix.openapi.metal.v1.model.Href;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.equinix.openapi.JSON;

/**
 * VirtualNetwork
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class VirtualNetwork {
  public static final String SERIALIZED_NAME_ASSIGNED_TO = "assigned_to";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_TO)
  private Href assignedTo;

  public static final String SERIALIZED_NAME_ASSIGNED_TO_VIRTUAL_CIRCUIT = "assigned_to_virtual_circuit";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_TO_VIRTUAL_CIRCUIT)
  private Boolean assignedToVirtualCircuit;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FACILITY = "facility";
  @SerializedName(SERIALIZED_NAME_FACILITY)
  private Href facility;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_INSTANCES = "instances";
  @SerializedName(SERIALIZED_NAME_INSTANCES)
  private List<Href> instances = null;

  public static final String SERIALIZED_NAME_METAL_GATEWAYS = "metal_gateways";
  @SerializedName(SERIALIZED_NAME_METAL_GATEWAYS)
  private List<Href> metalGateways = null;

  public static final String SERIALIZED_NAME_METRO = "metro";
  @SerializedName(SERIALIZED_NAME_METRO)
  private Href metro;

  public static final String SERIALIZED_NAME_METRO_CODE = "metro_code";
  @SerializedName(SERIALIZED_NAME_METRO_CODE)
  private String metroCode;

  public static final String SERIALIZED_NAME_VXLAN = "vxlan";
  @SerializedName(SERIALIZED_NAME_VXLAN)
  private Integer vxlan;

  public VirtualNetwork() {
  }

  public VirtualNetwork assignedTo(Href assignedTo) {
    
    this.assignedTo = assignedTo;
    return this;
  }

   /**
   * Get assignedTo
   * @return assignedTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Href getAssignedTo() {
    return assignedTo;
  }


  public void setAssignedTo(Href assignedTo) {
    this.assignedTo = assignedTo;
  }


  public VirtualNetwork assignedToVirtualCircuit(Boolean assignedToVirtualCircuit) {
    
    this.assignedToVirtualCircuit = assignedToVirtualCircuit;
    return this;
  }

   /**
   * True if the virtual network is attached to a virtual circuit. False if not.
   * @return assignedToVirtualCircuit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the virtual network is attached to a virtual circuit. False if not.")

  public Boolean getAssignedToVirtualCircuit() {
    return assignedToVirtualCircuit;
  }


  public void setAssignedToVirtualCircuit(Boolean assignedToVirtualCircuit) {
    this.assignedToVirtualCircuit = assignedToVirtualCircuit;
  }


  public VirtualNetwork description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public VirtualNetwork facility(Href facility) {
    
    this.facility = facility;
    return this;
  }

   /**
   * Get facility
   * @return facility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Href getFacility() {
    return facility;
  }


  public void setFacility(Href facility) {
    this.facility = facility;
  }


  public VirtualNetwork href(String href) {
    
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHref() {
    return href;
  }


  public void setHref(String href) {
    this.href = href;
  }


  public VirtualNetwork id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public VirtualNetwork instances(List<Href> instances) {
    
    this.instances = instances;
    return this;
  }

  public VirtualNetwork addInstancesItem(Href instancesItem) {
    if (this.instances == null) {
      this.instances = new ArrayList<>();
    }
    this.instances.add(instancesItem);
    return this;
  }

   /**
   * A list of instances with ports currently associated to this Virtual Network.
   * @return instances
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of instances with ports currently associated to this Virtual Network.")

  public List<Href> getInstances() {
    return instances;
  }


  public void setInstances(List<Href> instances) {
    this.instances = instances;
  }


  public VirtualNetwork metalGateways(List<Href> metalGateways) {
    
    this.metalGateways = metalGateways;
    return this;
  }

  public VirtualNetwork addMetalGatewaysItem(Href metalGatewaysItem) {
    if (this.metalGateways == null) {
      this.metalGateways = new ArrayList<>();
    }
    this.metalGateways.add(metalGatewaysItem);
    return this;
  }

   /**
   * A list of metal gateways currently associated to this Virtual Network.
   * @return metalGateways
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of metal gateways currently associated to this Virtual Network.")

  public List<Href> getMetalGateways() {
    return metalGateways;
  }


  public void setMetalGateways(List<Href> metalGateways) {
    this.metalGateways = metalGateways;
  }


  public VirtualNetwork metro(Href metro) {
    
    this.metro = metro;
    return this;
  }

   /**
   * Get metro
   * @return metro
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Href getMetro() {
    return metro;
  }


  public void setMetro(Href metro) {
    this.metro = metro;
  }


  public VirtualNetwork metroCode(String metroCode) {
    
    this.metroCode = metroCode;
    return this;
  }

   /**
   * The Metro code of the metro in which this Virtual Network is defined.
   * @return metroCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Metro code of the metro in which this Virtual Network is defined.")

  public String getMetroCode() {
    return metroCode;
  }


  public void setMetroCode(String metroCode) {
    this.metroCode = metroCode;
  }


  public VirtualNetwork vxlan(Integer vxlan) {
    
    this.vxlan = vxlan;
    return this;
  }

   /**
   * Get vxlan
   * @return vxlan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getVxlan() {
    return vxlan;
  }


  public void setVxlan(Integer vxlan) {
    this.vxlan = vxlan;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public VirtualNetwork putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualNetwork virtualNetwork = (VirtualNetwork) o;
    return Objects.equals(this.assignedTo, virtualNetwork.assignedTo) &&
        Objects.equals(this.assignedToVirtualCircuit, virtualNetwork.assignedToVirtualCircuit) &&
        Objects.equals(this.description, virtualNetwork.description) &&
        Objects.equals(this.facility, virtualNetwork.facility) &&
        Objects.equals(this.href, virtualNetwork.href) &&
        Objects.equals(this.id, virtualNetwork.id) &&
        Objects.equals(this.instances, virtualNetwork.instances) &&
        Objects.equals(this.metalGateways, virtualNetwork.metalGateways) &&
        Objects.equals(this.metro, virtualNetwork.metro) &&
        Objects.equals(this.metroCode, virtualNetwork.metroCode) &&
        Objects.equals(this.vxlan, virtualNetwork.vxlan)&&
        Objects.equals(this.additionalProperties, virtualNetwork.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignedTo, assignedToVirtualCircuit, description, facility, href, id, instances, metalGateways, metro, metroCode, vxlan, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualNetwork {\n");
    sb.append("    assignedTo: ").append(toIndentedString(assignedTo)).append("\n");
    sb.append("    assignedToVirtualCircuit: ").append(toIndentedString(assignedToVirtualCircuit)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    facility: ").append(toIndentedString(facility)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    metalGateways: ").append(toIndentedString(metalGateways)).append("\n");
    sb.append("    metro: ").append(toIndentedString(metro)).append("\n");
    sb.append("    metroCode: ").append(toIndentedString(metroCode)).append("\n");
    sb.append("    vxlan: ").append(toIndentedString(vxlan)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assigned_to");
    openapiFields.add("assigned_to_virtual_circuit");
    openapiFields.add("description");
    openapiFields.add("facility");
    openapiFields.add("href");
    openapiFields.add("id");
    openapiFields.add("instances");
    openapiFields.add("metal_gateways");
    openapiFields.add("metro");
    openapiFields.add("metro_code");
    openapiFields.add("vxlan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VirtualNetwork
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (VirtualNetwork.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualNetwork is not found in the empty JSON string", VirtualNetwork.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `assigned_to`
      if (jsonObj.get("assigned_to") != null && !jsonObj.get("assigned_to").isJsonNull()) {
        Href.validateJsonObject(jsonObj.getAsJsonObject("assigned_to"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `facility`
      if (jsonObj.get("facility") != null && !jsonObj.get("facility").isJsonNull()) {
        Href.validateJsonObject(jsonObj.getAsJsonObject("facility"));
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      JsonArray jsonArrayinstances = jsonObj.getAsJsonArray("instances");
      if (jsonArrayinstances != null) {
        // ensure the json data is an array
        if (!jsonObj.get("instances").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `instances` to be an array in the JSON string but got `%s`", jsonObj.get("instances").toString()));
        }

        // validate the optional field `instances` (array)
        for (int i = 0; i < jsonArrayinstances.size(); i++) {
          Href.validateJsonObject(jsonArrayinstances.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraymetalGateways = jsonObj.getAsJsonArray("metal_gateways");
      if (jsonArraymetalGateways != null) {
        // ensure the json data is an array
        if (!jsonObj.get("metal_gateways").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `metal_gateways` to be an array in the JSON string but got `%s`", jsonObj.get("metal_gateways").toString()));
        }

        // validate the optional field `metal_gateways` (array)
        for (int i = 0; i < jsonArraymetalGateways.size(); i++) {
          Href.validateJsonObject(jsonArraymetalGateways.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `metro`
      if (jsonObj.get("metro") != null && !jsonObj.get("metro").isJsonNull()) {
        Href.validateJsonObject(jsonObj.getAsJsonObject("metro"));
      }
      if ((jsonObj.get("metro_code") != null && !jsonObj.get("metro_code").isJsonNull()) && !jsonObj.get("metro_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metro_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metro_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualNetwork.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualNetwork' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualNetwork> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualNetwork.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualNetwork>() {
           @Override
           public void write(JsonWriter out, VirtualNetwork value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualNetwork read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VirtualNetwork instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VirtualNetwork given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VirtualNetwork
  * @throws IOException if the JSON string is invalid with respect to VirtualNetwork
  */
  public static VirtualNetwork fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualNetwork.class);
  }

 /**
  * Convert an instance of VirtualNetwork to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

