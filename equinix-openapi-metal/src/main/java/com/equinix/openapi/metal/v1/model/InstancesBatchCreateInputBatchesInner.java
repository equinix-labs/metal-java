/*
 * Metal API
 * # Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. Currently the search parameter is only available on devices, ssh_keys, api_keys and memberships endpoints.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.model;

import java.util.Objects;
import com.equinix.openapi.metal.v1.model.IPAddress;
import com.equinix.openapi.metal.v1.model.SSHKeyInput;
import com.equinix.openapi.metal.v1.model.Storage;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.equinix.openapi.JSON;

/**
 * InstancesBatchCreateInputBatchesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InstancesBatchCreateInputBatchesInner {
  public static final String SERIALIZED_NAME_HOSTNAMES = "hostnames";
  @SerializedName(SERIALIZED_NAME_HOSTNAMES)
  private List<String> hostnames;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_METRO = "metro";
  @SerializedName(SERIALIZED_NAME_METRO)
  private String metro;

  public static final String SERIALIZED_NAME_ALWAYS_PXE = "always_pxe";
  @SerializedName(SERIALIZED_NAME_ALWAYS_PXE)
  private Boolean alwaysPxe = false;

  /**
   * The billing cycle of the device.
   */
  @JsonAdapter(BillingCycleEnum.Adapter.class)
  public enum BillingCycleEnum {
    HOURLY("hourly"),
    
    DAILY("daily"),
    
    MONTHLY("monthly"),
    
    YEARLY("yearly");

    private String value;

    BillingCycleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BillingCycleEnum fromValue(String value) {
      for (BillingCycleEnum b : BillingCycleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BillingCycleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BillingCycleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BillingCycleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BillingCycleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BILLING_CYCLE = "billing_cycle";
  @SerializedName(SERIALIZED_NAME_BILLING_CYCLE)
  private BillingCycleEnum billingCycle;

  public static final String SERIALIZED_NAME_CUSTOMDATA = "customdata";
  @SerializedName(SERIALIZED_NAME_CUSTOMDATA)
  private Map<String, Object> customdata = new HashMap<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<String> features;

  public static final String SERIALIZED_NAME_HARDWARE_RESERVATION_ID = "hardware_reservation_id";
  @SerializedName(SERIALIZED_NAME_HARDWARE_RESERVATION_ID)
  private String hardwareReservationId = "";

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_IP_ADDRESSES = "ip_addresses";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESSES)
  private List<IPAddress> ipAddresses;

  public static final String SERIALIZED_NAME_IPXE_SCRIPT_URL = "ipxe_script_url";
  @SerializedName(SERIALIZED_NAME_IPXE_SCRIPT_URL)
  private String ipxeScriptUrl;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked = false;

  public static final String SERIALIZED_NAME_NETWORK_FROZEN = "network_frozen";
  @SerializedName(SERIALIZED_NAME_NETWORK_FROZEN)
  private Boolean networkFrozen;

  public static final String SERIALIZED_NAME_NO_SSH_KEYS = "no_ssh_keys";
  @SerializedName(SERIALIZED_NAME_NO_SSH_KEYS)
  private Boolean noSshKeys = false;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operating_system";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private String operatingSystem;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private String plan;

  public static final String SERIALIZED_NAME_PRIVATE_IPV4_SUBNET_SIZE = "private_ipv4_subnet_size";
  @SerializedName(SERIALIZED_NAME_PRIVATE_IPV4_SUBNET_SIZE)
  private Integer privateIpv4SubnetSize = 28;

  public static final String SERIALIZED_NAME_PROJECT_SSH_KEYS = "project_ssh_keys";
  @SerializedName(SERIALIZED_NAME_PROJECT_SSH_KEYS)
  private List<UUID> projectSshKeys;

  public static final String SERIALIZED_NAME_PUBLIC_IPV4_SUBNET_SIZE = "public_ipv4_subnet_size";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IPV4_SUBNET_SIZE)
  private Integer publicIpv4SubnetSize = 31;

  public static final String SERIALIZED_NAME_SPOT_INSTANCE = "spot_instance";
  @SerializedName(SERIALIZED_NAME_SPOT_INSTANCE)
  private Boolean spotInstance;

  public static final String SERIALIZED_NAME_SPOT_PRICE_MAX = "spot_price_max";
  @SerializedName(SERIALIZED_NAME_SPOT_PRICE_MAX)
  private Float spotPriceMax;

  public static final String SERIALIZED_NAME_SSH_KEYS = "ssh_keys";
  @SerializedName(SERIALIZED_NAME_SSH_KEYS)
  private List<SSHKeyInput> sshKeys;

  public static final String SERIALIZED_NAME_STORAGE = "storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private Storage storage;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags;

  public static final String SERIALIZED_NAME_TERMINATION_TIME = "termination_time";
  @SerializedName(SERIALIZED_NAME_TERMINATION_TIME)
  private OffsetDateTime terminationTime;

  public static final String SERIALIZED_NAME_USER_SSH_KEYS = "user_ssh_keys";
  @SerializedName(SERIALIZED_NAME_USER_SSH_KEYS)
  private List<UUID> userSshKeys;

  public static final String SERIALIZED_NAME_USERDATA = "userdata";
  @SerializedName(SERIALIZED_NAME_USERDATA)
  private String userdata;

  public static final String SERIALIZED_NAME_FACILITY = "facility";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_FACILITY)
  private List<String> facility = new ArrayList<>();

  public InstancesBatchCreateInputBatchesInner() {
  }

  public InstancesBatchCreateInputBatchesInner hostnames(List<String> hostnames) {
    
    this.hostnames = hostnames;
    return this;
  }

  public InstancesBatchCreateInputBatchesInner addHostnamesItem(String hostnamesItem) {
    if (this.hostnames == null) {
      this.hostnames = new ArrayList<>();
    }
    this.hostnames.add(hostnamesItem);
    return this;
  }

   /**
   * Get hostnames
   * @return hostnames
  **/
  @javax.annotation.Nullable
  public List<String> getHostnames() {
    return hostnames;
  }


  public void setHostnames(List<String> hostnames) {
    this.hostnames = hostnames;
  }


  public InstancesBatchCreateInputBatchesInner quantity(Integer quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The number of devices to create in this batch. The hostname may contain an &#x60;{{index}}&#x60; placeholder, which will be replaced with the index of the device in the batch. For example, if the hostname is &#x60;device-{{index}}&#x60;, the first device in the batch will have the hostname &#x60;device-01&#x60;, the second device will have the hostname &#x60;device-02&#x60;, and so on.
   * @return quantity
  **/
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }


  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public InstancesBatchCreateInputBatchesInner metro(String metro) {
    
    this.metro = metro;
    return this;
  }

   /**
   * Metro code or ID of where the instance should be provisioned in. Either metro or facility must be provided.
   * @return metro
  **/
  @javax.annotation.Nonnull
  public String getMetro() {
    return metro;
  }


  public void setMetro(String metro) {
    this.metro = metro;
  }


  public InstancesBatchCreateInputBatchesInner alwaysPxe(Boolean alwaysPxe) {
    
    this.alwaysPxe = alwaysPxe;
    return this;
  }

   /**
   * When true, devices with a &#x60;custom_ipxe&#x60; OS will always boot to iPXE. The default setting of false ensures that iPXE will be used on only the first boot.
   * @return alwaysPxe
  **/
  @javax.annotation.Nullable
  public Boolean getAlwaysPxe() {
    return alwaysPxe;
  }


  public void setAlwaysPxe(Boolean alwaysPxe) {
    this.alwaysPxe = alwaysPxe;
  }


  public InstancesBatchCreateInputBatchesInner billingCycle(BillingCycleEnum billingCycle) {
    
    this.billingCycle = billingCycle;
    return this;
  }

   /**
   * The billing cycle of the device.
   * @return billingCycle
  **/
  @javax.annotation.Nullable
  public BillingCycleEnum getBillingCycle() {
    return billingCycle;
  }


  public void setBillingCycle(BillingCycleEnum billingCycle) {
    this.billingCycle = billingCycle;
  }


  public InstancesBatchCreateInputBatchesInner customdata(Map<String, Object> customdata) {
    
    this.customdata = customdata;
    return this;
  }

  public InstancesBatchCreateInputBatchesInner putCustomdataItem(String key, Object customdataItem) {
    if (this.customdata == null) {
      this.customdata = new HashMap<>();
    }
    this.customdata.put(key, customdataItem);
    return this;
  }

   /**
   * Customdata is an arbitrary JSON value that can be accessed via the metadata service.
   * @return customdata
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getCustomdata() {
    return customdata;
  }


  public void setCustomdata(Map<String, Object> customdata) {
    this.customdata = customdata;
  }


  public InstancesBatchCreateInputBatchesInner description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Any description of the device or how it will be used. This may be used to inform other API consumers with project access.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public InstancesBatchCreateInputBatchesInner features(List<String> features) {
    
    this.features = features;
    return this;
  }

  public InstancesBatchCreateInputBatchesInner addFeaturesItem(String featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

   /**
   * The features attribute allows you to optionally specify what features your server should have.  In the API shorthand syntax, all features listed are &#x60;required&#x60;:  &#x60;&#x60;&#x60; { \&quot;features\&quot;: [\&quot;tpm\&quot;] } &#x60;&#x60;&#x60;  Alternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a &#x60;preferred&#x60; value. The request will not fail if we have no servers with that feature in our inventory. The API offers an alternative syntax for mixing preferred and required features:  &#x60;&#x60;&#x60; { \&quot;features\&quot;: { \&quot;tpm\&quot;: \&quot;required\&quot;, \&quot;raid\&quot;: \&quot;preferred\&quot; } } &#x60;&#x60;&#x60;  The request will only fail if there are no available servers matching the required &#x60;tpm&#x60; criteria.
   * @return features
  **/
  @javax.annotation.Nullable
  public List<String> getFeatures() {
    return features;
  }


  public void setFeatures(List<String> features) {
    this.features = features;
  }


  public InstancesBatchCreateInputBatchesInner hardwareReservationId(String hardwareReservationId) {
    
    this.hardwareReservationId = hardwareReservationId;
    return this;
  }

   /**
   * The Hardware Reservation UUID to provision. Alternatively, &#x60;next-available&#x60; can be specified to select from any of the available hardware reservations. An error will be returned if the requested reservation option is not available.  See [Reserved Hardware](https://metal.equinix.com/developers/docs/deploy/reserved/) for more details.
   * @return hardwareReservationId
  **/
  @javax.annotation.Nullable
  public String getHardwareReservationId() {
    return hardwareReservationId;
  }


  public void setHardwareReservationId(String hardwareReservationId) {
    this.hardwareReservationId = hardwareReservationId;
  }


  public InstancesBatchCreateInputBatchesInner hostname(String hostname) {
    
    this.hostname = hostname;
    return this;
  }

   /**
   * The hostname to use within the operating system. The same hostname may be used on multiple devices within a project.
   * @return hostname
  **/
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public InstancesBatchCreateInputBatchesInner ipAddresses(List<IPAddress> ipAddresses) {
    
    this.ipAddresses = ipAddresses;
    return this;
  }

  public InstancesBatchCreateInputBatchesInner addIpAddressesItem(IPAddress ipAddressesItem) {
    if (this.ipAddresses == null) {
      this.ipAddresses = new ArrayList<>();
    }
    this.ipAddresses.add(ipAddressesItem);
    return this;
  }

   /**
   * The &#x60;ip_addresses attribute will allow you to specify the addresses you want created with your device.  The default value configures public IPv4, public IPv6, and private IPv4.  Private IPv4 address is required. When specifying &#x60;ip_addresses&#x60;, one of the array items must enable private IPv4.  Some operating systems require public IPv4 address. In those cases you will receive an error message if public IPv4 is not enabled.  For example, to only configure your server with a private IPv4 address, you can send &#x60;{ \&quot;ip_addresses\&quot;: [{ \&quot;address_family\&quot;: 4, \&quot;public\&quot;: false }] }&#x60;.  It is possible to request a subnet size larger than a &#x60;/30&#x60; by assigning addresses using the UUID(s) of ip_reservations in your project.  For example, &#x60;{ \&quot;ip_addresses\&quot;: [..., {\&quot;address_family\&quot;: 4, \&quot;public\&quot;: true, \&quot;ip_reservations\&quot;: [\&quot;uuid1\&quot;, \&quot;uuid2\&quot;]}] }&#x60;  To access a server without public IPs, you can use our Out-of-Band console access (SOS) or proxy through another server in the project with public IPs enabled.
   * @return ipAddresses
  **/
  @javax.annotation.Nullable
  public List<IPAddress> getIpAddresses() {
    return ipAddresses;
  }


  public void setIpAddresses(List<IPAddress> ipAddresses) {
    this.ipAddresses = ipAddresses;
  }


  public InstancesBatchCreateInputBatchesInner ipxeScriptUrl(String ipxeScriptUrl) {
    
    this.ipxeScriptUrl = ipxeScriptUrl;
    return this;
  }

   /**
   * When set, the device will chainload an iPXE Script at boot fetched from the supplied URL.  See [Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/) for more details.
   * @return ipxeScriptUrl
  **/
  @javax.annotation.Nullable
  public String getIpxeScriptUrl() {
    return ipxeScriptUrl;
  }


  public void setIpxeScriptUrl(String ipxeScriptUrl) {
    this.ipxeScriptUrl = ipxeScriptUrl;
  }


  public InstancesBatchCreateInputBatchesInner locked(Boolean locked) {
    
    this.locked = locked;
    return this;
  }

   /**
   * Whether the device should be locked, preventing accidental deletion.
   * @return locked
  **/
  @javax.annotation.Nullable
  public Boolean getLocked() {
    return locked;
  }


  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public InstancesBatchCreateInputBatchesInner networkFrozen(Boolean networkFrozen) {
    
    this.networkFrozen = networkFrozen;
    return this;
  }

   /**
   * If true, this instance can not be converted to a different network type.
   * @return networkFrozen
  **/
  @javax.annotation.Nullable
  public Boolean getNetworkFrozen() {
    return networkFrozen;
  }


  public void setNetworkFrozen(Boolean networkFrozen) {
    this.networkFrozen = networkFrozen;
  }


  public InstancesBatchCreateInputBatchesInner noSshKeys(Boolean noSshKeys) {
    
    this.noSshKeys = noSshKeys;
    return this;
  }

   /**
   * Overrides default behaviour of attaching all of the organization members ssh keys and project ssh keys to device if no specific keys specified
   * @return noSshKeys
  **/
  @javax.annotation.Nullable
  public Boolean getNoSshKeys() {
    return noSshKeys;
  }


  public void setNoSshKeys(Boolean noSshKeys) {
    this.noSshKeys = noSshKeys;
  }


  public InstancesBatchCreateInputBatchesInner operatingSystem(String operatingSystem) {
    
    this.operatingSystem = operatingSystem;
    return this;
  }

   /**
   * The slug of the operating system to provision. Check the Equinix Metal operating system documentation for rules that may be imposed per operating system, including restrictions on IP address options and device plans.
   * @return operatingSystem
  **/
  @javax.annotation.Nonnull
  public String getOperatingSystem() {
    return operatingSystem;
  }


  public void setOperatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public InstancesBatchCreateInputBatchesInner plan(String plan) {
    
    this.plan = plan;
    return this;
  }

   /**
   * The slug of the device plan to provision.
   * @return plan
  **/
  @javax.annotation.Nonnull
  public String getPlan() {
    return plan;
  }


  public void setPlan(String plan) {
    this.plan = plan;
  }


  public InstancesBatchCreateInputBatchesInner privateIpv4SubnetSize(Integer privateIpv4SubnetSize) {
    
    this.privateIpv4SubnetSize = privateIpv4SubnetSize;
    return this;
  }

   /**
   * Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device.
   * @return privateIpv4SubnetSize
  **/
  @javax.annotation.Nullable
  public Integer getPrivateIpv4SubnetSize() {
    return privateIpv4SubnetSize;
  }


  public void setPrivateIpv4SubnetSize(Integer privateIpv4SubnetSize) {
    this.privateIpv4SubnetSize = privateIpv4SubnetSize;
  }


  public InstancesBatchCreateInputBatchesInner projectSshKeys(List<UUID> projectSshKeys) {
    
    this.projectSshKeys = projectSshKeys;
    return this;
  }

  public InstancesBatchCreateInputBatchesInner addProjectSshKeysItem(UUID projectSshKeysItem) {
    if (this.projectSshKeys == null) {
      this.projectSshKeys = new ArrayList<>();
    }
    this.projectSshKeys.add(projectSshKeysItem);
    return this;
  }

   /**
   * A list of UUIDs identifying the device parent project that should be authorized to access this device (typically via /root/.ssh/authorized_keys). These keys will also appear in the device metadata.  If no SSH keys are specified (&#x60;user_ssh_keys&#x60;, &#x60;project_ssh_keys&#x60;, and &#x60;ssh_keys&#x60; are all empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. This behaviour can be changed with &#39;no_ssh_keys&#39; option to omit any SSH key being added. 
   * @return projectSshKeys
  **/
  @javax.annotation.Nullable
  public List<UUID> getProjectSshKeys() {
    return projectSshKeys;
  }


  public void setProjectSshKeys(List<UUID> projectSshKeys) {
    this.projectSshKeys = projectSshKeys;
  }


  public InstancesBatchCreateInputBatchesInner publicIpv4SubnetSize(Integer publicIpv4SubnetSize) {
    
    this.publicIpv4SubnetSize = publicIpv4SubnetSize;
    return this;
  }

   /**
   * Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device. Your project must have addresses available for a non-default request.
   * @return publicIpv4SubnetSize
  **/
  @javax.annotation.Nullable
  public Integer getPublicIpv4SubnetSize() {
    return publicIpv4SubnetSize;
  }


  public void setPublicIpv4SubnetSize(Integer publicIpv4SubnetSize) {
    this.publicIpv4SubnetSize = publicIpv4SubnetSize;
  }


  public InstancesBatchCreateInputBatchesInner spotInstance(Boolean spotInstance) {
    
    this.spotInstance = spotInstance;
    return this;
  }

   /**
   * Create a spot instance. Spot instances are created with a maximum bid price. If the bid price is not met, the spot instance will be terminated as indicated by the &#x60;termination_time&#x60; field.
   * @return spotInstance
  **/
  @javax.annotation.Nullable
  public Boolean getSpotInstance() {
    return spotInstance;
  }


  public void setSpotInstance(Boolean spotInstance) {
    this.spotInstance = spotInstance;
  }


  public InstancesBatchCreateInputBatchesInner spotPriceMax(Float spotPriceMax) {
    
    this.spotPriceMax = spotPriceMax;
    return this;
  }

   /**
   * The maximum amount to bid for a spot instance.
   * @return spotPriceMax
  **/
  @javax.annotation.Nullable
  public Float getSpotPriceMax() {
    return spotPriceMax;
  }


  public void setSpotPriceMax(Float spotPriceMax) {
    this.spotPriceMax = spotPriceMax;
  }


  public InstancesBatchCreateInputBatchesInner sshKeys(List<SSHKeyInput> sshKeys) {
    
    this.sshKeys = sshKeys;
    return this;
  }

  public InstancesBatchCreateInputBatchesInner addSshKeysItem(SSHKeyInput sshKeysItem) {
    if (this.sshKeys == null) {
      this.sshKeys = new ArrayList<>();
    }
    this.sshKeys.add(sshKeysItem);
    return this;
  }

   /**
   * A list of new or existing project ssh_keys that should be authorized to access this device (typically via /root/.ssh/authorized_keys). These keys will also appear in the device metadata.  These keys are added in addition to any keys defined by   &#x60;project_ssh_keys&#x60; and &#x60;user_ssh_keys&#x60;. 
   * @return sshKeys
  **/
  @javax.annotation.Nullable
  public List<SSHKeyInput> getSshKeys() {
    return sshKeys;
  }


  public void setSshKeys(List<SSHKeyInput> sshKeys) {
    this.sshKeys = sshKeys;
  }


  public InstancesBatchCreateInputBatchesInner storage(Storage storage) {
    
    this.storage = storage;
    return this;
  }

   /**
   * Get storage
   * @return storage
  **/
  @javax.annotation.Nullable
  public Storage getStorage() {
    return storage;
  }


  public void setStorage(Storage storage) {
    this.storage = storage;
  }


  public InstancesBatchCreateInputBatchesInner tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public InstancesBatchCreateInputBatchesInner addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public InstancesBatchCreateInputBatchesInner terminationTime(OffsetDateTime terminationTime) {
    
    this.terminationTime = terminationTime;
    return this;
  }

   /**
   * When the device will be terminated. If you don&#39;t supply timezone info, the timestamp is assumed to be in UTC.  This is commonly set in advance for ephemeral spot market instances but this field may also be set with on-demand and reservation instances to automatically delete the resource at a given time. The termination time can also be used to release a hardware reservation instance at a given time, keeping the reservation open for other uses.  On a spot market device, the termination time will be set automatically when outbid. 
   * @return terminationTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getTerminationTime() {
    return terminationTime;
  }


  public void setTerminationTime(OffsetDateTime terminationTime) {
    this.terminationTime = terminationTime;
  }


  public InstancesBatchCreateInputBatchesInner userSshKeys(List<UUID> userSshKeys) {
    
    this.userSshKeys = userSshKeys;
    return this;
  }

  public InstancesBatchCreateInputBatchesInner addUserSshKeysItem(UUID userSshKeysItem) {
    if (this.userSshKeys == null) {
      this.userSshKeys = new ArrayList<>();
    }
    this.userSshKeys.add(userSshKeysItem);
    return this;
  }

   /**
   * A list of UUIDs identifying the users that should be authorized to access this device (typically via /root/.ssh/authorized_keys).  These keys will also appear in the device metadata.  The users must be members of the project or organization.  If no SSH keys are specified (&#x60;user_ssh_keys&#x60;, &#x60;project_ssh_keys&#x60;, and &#x60;ssh_keys&#x60; are all empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. This behaviour can be changed with &#39;no_ssh_keys&#39; option to omit any SSH key being added. 
   * @return userSshKeys
  **/
  @javax.annotation.Nullable
  public List<UUID> getUserSshKeys() {
    return userSshKeys;
  }


  public void setUserSshKeys(List<UUID> userSshKeys) {
    this.userSshKeys = userSshKeys;
  }


  public InstancesBatchCreateInputBatchesInner userdata(String userdata) {
    
    this.userdata = userdata;
    return this;
  }

   /**
   * The userdata presented in the metadata service for this device.  Userdata is fetched and interpreted by the operating system installed on the device. Acceptable formats are determined by the operating system, with the exception of a special iPXE enabling syntax which is handled before the operating system starts.  See [Server User Data](https://metal.equinix.com/developers/docs/servers/user-data/) and [Provisioning with Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/#provisioning-with-custom-ipxe) for more details.
   * @return userdata
  **/
  @javax.annotation.Nullable
  public String getUserdata() {
    return userdata;
  }


  public void setUserdata(String userdata) {
    this.userdata = userdata;
  }


  @Deprecated
  public InstancesBatchCreateInputBatchesInner facility(List<String> facility) {
    
    this.facility = facility;
    return this;
  }

  public InstancesBatchCreateInputBatchesInner addFacilityItem(String facilityItem) {
    if (this.facility == null) {
      this.facility = new ArrayList<>();
    }
    this.facility.add(facilityItem);
    return this;
  }

   /**
   * The datacenter where the device should be created.  Either metro or facility must be provided.  The API will accept either a single facility &#x60;{ \&quot;facility\&quot;: \&quot;f1\&quot; }&#x60;, or it can be instructed to create the device in the best available datacenter &#x60;{ \&quot;facility\&quot;: \&quot;any\&quot; }&#x60;.  Additionally it is possible to set a prioritized location selection. For example &#x60;{ \&quot;facility\&quot;: [\&quot;f3\&quot;, \&quot;f2\&quot;, \&quot;any\&quot;] }&#x60; can be used to prioritize &#x60;f3&#x60; and then &#x60;f2&#x60; before accepting &#x60;any&#x60; facility. If none of the facilities provided have availability for the requested device the request will fail.
   * @return facility
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull
  public List<String> getFacility() {
    return facility;
  }


  @Deprecated
  public void setFacility(List<String> facility) {
    this.facility = facility;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the InstancesBatchCreateInputBatchesInner instance itself
   */
  public InstancesBatchCreateInputBatchesInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstancesBatchCreateInputBatchesInner instancesBatchCreateInputBatchesInner = (InstancesBatchCreateInputBatchesInner) o;
    return Objects.equals(this.hostnames, instancesBatchCreateInputBatchesInner.hostnames) &&
        Objects.equals(this.quantity, instancesBatchCreateInputBatchesInner.quantity) &&
        Objects.equals(this.metro, instancesBatchCreateInputBatchesInner.metro) &&
        Objects.equals(this.alwaysPxe, instancesBatchCreateInputBatchesInner.alwaysPxe) &&
        Objects.equals(this.billingCycle, instancesBatchCreateInputBatchesInner.billingCycle) &&
        Objects.equals(this.customdata, instancesBatchCreateInputBatchesInner.customdata) &&
        Objects.equals(this.description, instancesBatchCreateInputBatchesInner.description) &&
        Objects.equals(this.features, instancesBatchCreateInputBatchesInner.features) &&
        Objects.equals(this.hardwareReservationId, instancesBatchCreateInputBatchesInner.hardwareReservationId) &&
        Objects.equals(this.hostname, instancesBatchCreateInputBatchesInner.hostname) &&
        Objects.equals(this.ipAddresses, instancesBatchCreateInputBatchesInner.ipAddresses) &&
        Objects.equals(this.ipxeScriptUrl, instancesBatchCreateInputBatchesInner.ipxeScriptUrl) &&
        Objects.equals(this.locked, instancesBatchCreateInputBatchesInner.locked) &&
        Objects.equals(this.networkFrozen, instancesBatchCreateInputBatchesInner.networkFrozen) &&
        Objects.equals(this.noSshKeys, instancesBatchCreateInputBatchesInner.noSshKeys) &&
        Objects.equals(this.operatingSystem, instancesBatchCreateInputBatchesInner.operatingSystem) &&
        Objects.equals(this.plan, instancesBatchCreateInputBatchesInner.plan) &&
        Objects.equals(this.privateIpv4SubnetSize, instancesBatchCreateInputBatchesInner.privateIpv4SubnetSize) &&
        Objects.equals(this.projectSshKeys, instancesBatchCreateInputBatchesInner.projectSshKeys) &&
        Objects.equals(this.publicIpv4SubnetSize, instancesBatchCreateInputBatchesInner.publicIpv4SubnetSize) &&
        Objects.equals(this.spotInstance, instancesBatchCreateInputBatchesInner.spotInstance) &&
        Objects.equals(this.spotPriceMax, instancesBatchCreateInputBatchesInner.spotPriceMax) &&
        Objects.equals(this.sshKeys, instancesBatchCreateInputBatchesInner.sshKeys) &&
        Objects.equals(this.storage, instancesBatchCreateInputBatchesInner.storage) &&
        Objects.equals(this.tags, instancesBatchCreateInputBatchesInner.tags) &&
        Objects.equals(this.terminationTime, instancesBatchCreateInputBatchesInner.terminationTime) &&
        Objects.equals(this.userSshKeys, instancesBatchCreateInputBatchesInner.userSshKeys) &&
        Objects.equals(this.userdata, instancesBatchCreateInputBatchesInner.userdata) &&
        Objects.equals(this.facility, instancesBatchCreateInputBatchesInner.facility)&&
        Objects.equals(this.additionalProperties, instancesBatchCreateInputBatchesInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostnames, quantity, metro, alwaysPxe, billingCycle, customdata, description, features, hardwareReservationId, hostname, ipAddresses, ipxeScriptUrl, locked, networkFrozen, noSshKeys, operatingSystem, plan, privateIpv4SubnetSize, projectSshKeys, publicIpv4SubnetSize, spotInstance, spotPriceMax, sshKeys, storage, tags, terminationTime, userSshKeys, userdata, facility, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstancesBatchCreateInputBatchesInner {\n");
    sb.append("    hostnames: ").append(toIndentedString(hostnames)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    metro: ").append(toIndentedString(metro)).append("\n");
    sb.append("    alwaysPxe: ").append(toIndentedString(alwaysPxe)).append("\n");
    sb.append("    billingCycle: ").append(toIndentedString(billingCycle)).append("\n");
    sb.append("    customdata: ").append(toIndentedString(customdata)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    hardwareReservationId: ").append(toIndentedString(hardwareReservationId)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    ipAddresses: ").append(toIndentedString(ipAddresses)).append("\n");
    sb.append("    ipxeScriptUrl: ").append(toIndentedString(ipxeScriptUrl)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    networkFrozen: ").append(toIndentedString(networkFrozen)).append("\n");
    sb.append("    noSshKeys: ").append(toIndentedString(noSshKeys)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    privateIpv4SubnetSize: ").append(toIndentedString(privateIpv4SubnetSize)).append("\n");
    sb.append("    projectSshKeys: ").append(toIndentedString(projectSshKeys)).append("\n");
    sb.append("    publicIpv4SubnetSize: ").append(toIndentedString(publicIpv4SubnetSize)).append("\n");
    sb.append("    spotInstance: ").append(toIndentedString(spotInstance)).append("\n");
    sb.append("    spotPriceMax: ").append(toIndentedString(spotPriceMax)).append("\n");
    sb.append("    sshKeys: ").append(toIndentedString(sshKeys)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    terminationTime: ").append(toIndentedString(terminationTime)).append("\n");
    sb.append("    userSshKeys: ").append(toIndentedString(userSshKeys)).append("\n");
    sb.append("    userdata: ").append(toIndentedString(userdata)).append("\n");
    sb.append("    facility: ").append(toIndentedString(facility)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hostnames");
    openapiFields.add("quantity");
    openapiFields.add("metro");
    openapiFields.add("always_pxe");
    openapiFields.add("billing_cycle");
    openapiFields.add("customdata");
    openapiFields.add("description");
    openapiFields.add("features");
    openapiFields.add("hardware_reservation_id");
    openapiFields.add("hostname");
    openapiFields.add("ip_addresses");
    openapiFields.add("ipxe_script_url");
    openapiFields.add("locked");
    openapiFields.add("network_frozen");
    openapiFields.add("no_ssh_keys");
    openapiFields.add("operating_system");
    openapiFields.add("plan");
    openapiFields.add("private_ipv4_subnet_size");
    openapiFields.add("project_ssh_keys");
    openapiFields.add("public_ipv4_subnet_size");
    openapiFields.add("spot_instance");
    openapiFields.add("spot_price_max");
    openapiFields.add("ssh_keys");
    openapiFields.add("storage");
    openapiFields.add("tags");
    openapiFields.add("termination_time");
    openapiFields.add("user_ssh_keys");
    openapiFields.add("userdata");
    openapiFields.add("facility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("metro");
    openapiRequiredFields.add("operating_system");
    openapiRequiredFields.add("plan");
    openapiRequiredFields.add("facility");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to InstancesBatchCreateInputBatchesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstancesBatchCreateInputBatchesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstancesBatchCreateInputBatchesInner is not found in the empty JSON string", InstancesBatchCreateInputBatchesInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InstancesBatchCreateInputBatchesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("hostnames") != null && !jsonObj.get("hostnames").isJsonNull() && !jsonObj.get("hostnames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostnames` to be an array in the JSON string but got `%s`", jsonObj.get("hostnames").toString()));
      }
      if (!jsonObj.get("metro").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metro` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metro").toString()));
      }
      if ((jsonObj.get("billing_cycle") != null && !jsonObj.get("billing_cycle").isJsonNull()) && !jsonObj.get("billing_cycle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_cycle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_cycle").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull() && !jsonObj.get("features").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `features` to be an array in the JSON string but got `%s`", jsonObj.get("features").toString()));
      }
      if ((jsonObj.get("hardware_reservation_id") != null && !jsonObj.get("hardware_reservation_id").isJsonNull()) && !jsonObj.get("hardware_reservation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hardware_reservation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hardware_reservation_id").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if (jsonObj.get("ip_addresses") != null && !jsonObj.get("ip_addresses").isJsonNull()) {
        JsonArray jsonArrayipAddresses = jsonObj.getAsJsonArray("ip_addresses");
        if (jsonArrayipAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ip_addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ip_addresses` to be an array in the JSON string but got `%s`", jsonObj.get("ip_addresses").toString()));
          }

          // validate the optional field `ip_addresses` (array)
          for (int i = 0; i < jsonArrayipAddresses.size(); i++) {
            IPAddress.validateJsonElement(jsonArrayipAddresses.get(i));
          };
        }
      }
      if ((jsonObj.get("ipxe_script_url") != null && !jsonObj.get("ipxe_script_url").isJsonNull()) && !jsonObj.get("ipxe_script_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipxe_script_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipxe_script_url").toString()));
      }
      if (!jsonObj.get("operating_system").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operating_system` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operating_system").toString()));
      }
      if (!jsonObj.get("plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("project_ssh_keys") != null && !jsonObj.get("project_ssh_keys").isJsonNull() && !jsonObj.get("project_ssh_keys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_ssh_keys` to be an array in the JSON string but got `%s`", jsonObj.get("project_ssh_keys").toString()));
      }
      if (jsonObj.get("ssh_keys") != null && !jsonObj.get("ssh_keys").isJsonNull()) {
        JsonArray jsonArraysshKeys = jsonObj.getAsJsonArray("ssh_keys");
        if (jsonArraysshKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ssh_keys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ssh_keys` to be an array in the JSON string but got `%s`", jsonObj.get("ssh_keys").toString()));
          }

          // validate the optional field `ssh_keys` (array)
          for (int i = 0; i < jsonArraysshKeys.size(); i++) {
            SSHKeyInput.validateJsonElement(jsonArraysshKeys.get(i));
          };
        }
      }
      // validate the optional field `storage`
      if (jsonObj.get("storage") != null && !jsonObj.get("storage").isJsonNull()) {
        Storage.validateJsonElement(jsonObj.get("storage"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("user_ssh_keys") != null && !jsonObj.get("user_ssh_keys").isJsonNull() && !jsonObj.get("user_ssh_keys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_ssh_keys` to be an array in the JSON string but got `%s`", jsonObj.get("user_ssh_keys").toString()));
      }
      if ((jsonObj.get("userdata") != null && !jsonObj.get("userdata").isJsonNull()) && !jsonObj.get("userdata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userdata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userdata").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("facility") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("facility").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `facility` to be an array in the JSON string but got `%s`", jsonObj.get("facility").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstancesBatchCreateInputBatchesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstancesBatchCreateInputBatchesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstancesBatchCreateInputBatchesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstancesBatchCreateInputBatchesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<InstancesBatchCreateInputBatchesInner>() {
           @Override
           public void write(JsonWriter out, InstancesBatchCreateInputBatchesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public InstancesBatchCreateInputBatchesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             InstancesBatchCreateInputBatchesInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InstancesBatchCreateInputBatchesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InstancesBatchCreateInputBatchesInner
  * @throws IOException if the JSON string is invalid with respect to InstancesBatchCreateInputBatchesInner
  */
  public static InstancesBatchCreateInputBatchesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstancesBatchCreateInputBatchesInner.class);
  }

 /**
  * Convert an instance of InstancesBatchCreateInputBatchesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

