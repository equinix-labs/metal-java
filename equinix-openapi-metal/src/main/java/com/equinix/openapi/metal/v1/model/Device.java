/*
 * Metal API
 * # Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. Currently the search parameter is only available on devices, ssh_keys, api_keys and memberships endpoints.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.equinix.openapi.metal.v1.model.DeviceActionsInner;
import com.equinix.openapi.metal.v1.model.DeviceCreatedBy;
import com.equinix.openapi.metal.v1.model.DeviceMetro;
import com.equinix.openapi.metal.v1.model.DeviceProject;
import com.equinix.openapi.metal.v1.model.DeviceProjectLite;
import com.equinix.openapi.metal.v1.model.Event;
import com.equinix.openapi.metal.v1.model.Facility;
import com.equinix.openapi.metal.v1.model.HardwareReservation;
import com.equinix.openapi.metal.v1.model.Href;
import com.equinix.openapi.metal.v1.model.IPAssignment;
import com.equinix.openapi.metal.v1.model.OperatingSystem;
import com.equinix.openapi.metal.v1.model.Plan;
import com.equinix.openapi.metal.v1.model.Port;
import com.equinix.openapi.metal.v1.model.Storage;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.equinix.openapi.JSON;

/**
 * Device
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Device {
  public static final String SERIALIZED_NAME_ALWAYS_PXE = "always_pxe";
  @SerializedName(SERIALIZED_NAME_ALWAYS_PXE)
  private Boolean alwaysPxe;

  public static final String SERIALIZED_NAME_BILLING_CYCLE = "billing_cycle";
  @SerializedName(SERIALIZED_NAME_BILLING_CYCLE)
  private String billingCycle;

  public static final String SERIALIZED_NAME_BONDING_MODE = "bonding_mode";
  @SerializedName(SERIALIZED_NAME_BONDING_MODE)
  private Integer bondingMode;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private DeviceCreatedBy createdBy;

  public static final String SERIALIZED_NAME_CUSTOMDATA = "customdata";
  @SerializedName(SERIALIZED_NAME_CUSTOMDATA)
  private Map<String, Object> customdata = null;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FACILITY = "facility";
  @SerializedName(SERIALIZED_NAME_FACILITY)
  private Facility facility;

  public static final String SERIALIZED_NAME_HARDWARE_RESERVATION = "hardware_reservation";
  @SerializedName(SERIALIZED_NAME_HARDWARE_RESERVATION)
  private HardwareReservation hardwareReservation;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_IP_ADDRESSES = "ip_addresses";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESSES)
  private List<IPAssignment> ipAddresses = null;

  public static final String SERIALIZED_NAME_IPXE_SCRIPT_URL = "ipxe_script_url";
  @SerializedName(SERIALIZED_NAME_IPXE_SCRIPT_URL)
  private String ipxeScriptUrl;

  public static final String SERIALIZED_NAME_IQN = "iqn";
  @SerializedName(SERIALIZED_NAME_IQN)
  private String iqn;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_METRO = "metro";
  @SerializedName(SERIALIZED_NAME_METRO)
  private DeviceMetro metro;

  public static final String SERIALIZED_NAME_NETWORK_FROZEN = "network_frozen";
  @SerializedName(SERIALIZED_NAME_NETWORK_FROZEN)
  private Boolean networkFrozen;

  public static final String SERIALIZED_NAME_NETWORK_PORTS = "network_ports";
  @SerializedName(SERIALIZED_NAME_NETWORK_PORTS)
  private List<Port> networkPorts = null;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operating_system";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private OperatingSystem operatingSystem;

  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<DeviceActionsInner> actions = null;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private Plan plan;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private DeviceProject project;

  public static final String SERIALIZED_NAME_PROJECT_LITE = "project_lite";
  @SerializedName(SERIALIZED_NAME_PROJECT_LITE)
  private DeviceProjectLite projectLite;

  public static final String SERIALIZED_NAME_PROVISIONING_EVENTS = "provisioning_events";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_EVENTS)
  private List<Event> provisioningEvents = null;

  public static final String SERIALIZED_NAME_PROVISIONING_PERCENTAGE = "provisioning_percentage";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_PERCENTAGE)
  private Float provisioningPercentage;

  public static final String SERIALIZED_NAME_ROOT_PASSWORD = "root_password";
  @SerializedName(SERIALIZED_NAME_ROOT_PASSWORD)
  private String rootPassword;

  public static final String SERIALIZED_NAME_SHORT_ID = "short_id";
  @SerializedName(SERIALIZED_NAME_SHORT_ID)
  private String shortId;

  public static final String SERIALIZED_NAME_SPOT_INSTANCE = "spot_instance";
  @SerializedName(SERIALIZED_NAME_SPOT_INSTANCE)
  private Boolean spotInstance;

  public static final String SERIALIZED_NAME_SPOT_PRICE_MAX = "spot_price_max";
  @SerializedName(SERIALIZED_NAME_SPOT_PRICE_MAX)
  private Float spotPriceMax;

  public static final String SERIALIZED_NAME_SSH_KEYS = "ssh_keys";
  @SerializedName(SERIALIZED_NAME_SSH_KEYS)
  private List<Href> sshKeys = null;

  /**
   * The current state the instance is in.  * When an instance is initially created it will be in the &#x60;queued&#x60; state until it is picked up by the provisioner. * Once provisioning has begun on the instance it&#39;s state will move to &#x60;provisioning&#x60;. * When an instance is deleted, it will move to &#x60;deprovisioning&#x60; state until the deprovision is completed and the instance state moves to &#x60;deleted&#x60;. * If an instance fails to provision or deprovision it will move to &#x60;failed&#x60; state. * Once an instance has completed provisioning it will move to &#x60;active&#x60; state. * If an instance is currently powering off or powering on it will move to &#x60;powering_off&#x60; or &#x60;powering_on&#x60; states respectively.  * When the instance is powered off completely it will move to the &#x60;inactive&#x60; state. * When an instance is powered on completely it will move to the &#x60;active&#x60; state. * Using the reinstall action to install a new OS on the instance will cause the instance state to change to &#x60;reinstalling&#x60;. * When the reinstall action is complete the instance will move to &#x60;active&#x60; state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    QUEUED("queued"),
    
    PROVISIONING("provisioning"),
    
    DEPROVISIONING("deprovisioning"),
    
    REINSTALLING("reinstalling"),
    
    ACTIVE("active"),
    
    INACTIVE("inactive"),
    
    FAILED("failed"),
    
    POWERING_ON("powering_on"),
    
    POWERING_OFF("powering_off"),
    
    DELETED("deleted");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STORAGE = "storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private Storage storage;

  public static final String SERIALIZED_NAME_SWITCH_UUID = "switch_uuid";
  @SerializedName(SERIALIZED_NAME_SWITCH_UUID)
  private String switchUuid;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_TERMINATION_TIME = "termination_time";
  @SerializedName(SERIALIZED_NAME_TERMINATION_TIME)
  private OffsetDateTime terminationTime;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_USERDATA = "userdata";
  @SerializedName(SERIALIZED_NAME_USERDATA)
  private String userdata;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<Href> volumes = null;

  public static final String SERIALIZED_NAME_SOS = "sos";
  @SerializedName(SERIALIZED_NAME_SOS)
  private String sos;

  public Device() {
  }

  public Device alwaysPxe(Boolean alwaysPxe) {
    
    this.alwaysPxe = alwaysPxe;
    return this;
  }

   /**
   * Get alwaysPxe
   * @return alwaysPxe
  **/
  @javax.annotation.Nullable

  public Boolean getAlwaysPxe() {
    return alwaysPxe;
  }


  public void setAlwaysPxe(Boolean alwaysPxe) {
    this.alwaysPxe = alwaysPxe;
  }


  public Device billingCycle(String billingCycle) {
    
    this.billingCycle = billingCycle;
    return this;
  }

   /**
   * Get billingCycle
   * @return billingCycle
  **/
  @javax.annotation.Nullable

  public String getBillingCycle() {
    return billingCycle;
  }


  public void setBillingCycle(String billingCycle) {
    this.billingCycle = billingCycle;
  }


  public Device bondingMode(Integer bondingMode) {
    
    this.bondingMode = bondingMode;
    return this;
  }

   /**
   * Get bondingMode
   * @return bondingMode
  **/
  @javax.annotation.Nullable

  public Integer getBondingMode() {
    return bondingMode;
  }


  public void setBondingMode(Integer bondingMode) {
    this.bondingMode = bondingMode;
  }


  public Device createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Device createdBy(DeviceCreatedBy createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable

  public DeviceCreatedBy getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(DeviceCreatedBy createdBy) {
    this.createdBy = createdBy;
  }


  public Device customdata(Map<String, Object> customdata) {
    
    this.customdata = customdata;
    return this;
  }

  public Device putCustomdataItem(String key, Object customdataItem) {
    if (this.customdata == null) {
      this.customdata = new HashMap<>();
    }
    this.customdata.put(key, customdataItem);
    return this;
  }

   /**
   * Get customdata
   * @return customdata
  **/
  @javax.annotation.Nullable

  public Map<String, Object> getCustomdata() {
    return customdata;
  }


  public void setCustomdata(Map<String, Object> customdata) {
    this.customdata = customdata;
  }


  public Device description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Device facility(Facility facility) {
    
    this.facility = facility;
    return this;
  }

   /**
   * Get facility
   * @return facility
  **/
  @javax.annotation.Nullable

  public Facility getFacility() {
    return facility;
  }


  public void setFacility(Facility facility) {
    this.facility = facility;
  }


  public Device hardwareReservation(HardwareReservation hardwareReservation) {
    
    this.hardwareReservation = hardwareReservation;
    return this;
  }

   /**
   * Get hardwareReservation
   * @return hardwareReservation
  **/
  @javax.annotation.Nullable

  public HardwareReservation getHardwareReservation() {
    return hardwareReservation;
  }


  public void setHardwareReservation(HardwareReservation hardwareReservation) {
    this.hardwareReservation = hardwareReservation;
  }


  public Device hostname(String hostname) {
    
    this.hostname = hostname;
    return this;
  }

   /**
   * Get hostname
   * @return hostname
  **/
  @javax.annotation.Nullable

  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public Device href(String href) {
    
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @javax.annotation.Nullable

  public String getHref() {
    return href;
  }


  public void setHref(String href) {
    this.href = href;
  }


  public Device id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public Device imageUrl(String imageUrl) {
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * Get imageUrl
   * @return imageUrl
  **/
  @javax.annotation.Nullable

  public String getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public Device ipAddresses(List<IPAssignment> ipAddresses) {
    
    this.ipAddresses = ipAddresses;
    return this;
  }

  public Device addIpAddressesItem(IPAssignment ipAddressesItem) {
    if (this.ipAddresses == null) {
      this.ipAddresses = new ArrayList<>();
    }
    this.ipAddresses.add(ipAddressesItem);
    return this;
  }

   /**
   * Get ipAddresses
   * @return ipAddresses
  **/
  @javax.annotation.Nullable

  public List<IPAssignment> getIpAddresses() {
    return ipAddresses;
  }


  public void setIpAddresses(List<IPAssignment> ipAddresses) {
    this.ipAddresses = ipAddresses;
  }


  public Device ipxeScriptUrl(String ipxeScriptUrl) {
    
    this.ipxeScriptUrl = ipxeScriptUrl;
    return this;
  }

   /**
   * Get ipxeScriptUrl
   * @return ipxeScriptUrl
  **/
  @javax.annotation.Nullable

  public String getIpxeScriptUrl() {
    return ipxeScriptUrl;
  }


  public void setIpxeScriptUrl(String ipxeScriptUrl) {
    this.ipxeScriptUrl = ipxeScriptUrl;
  }


  public Device iqn(String iqn) {
    
    this.iqn = iqn;
    return this;
  }

   /**
   * Get iqn
   * @return iqn
  **/
  @javax.annotation.Nullable

  public String getIqn() {
    return iqn;
  }


  public void setIqn(String iqn) {
    this.iqn = iqn;
  }


  public Device locked(Boolean locked) {
    
    this.locked = locked;
    return this;
  }

   /**
   * Prevents accidental deletion of this resource when set to true.
   * @return locked
  **/
  @javax.annotation.Nullable

  public Boolean getLocked() {
    return locked;
  }


  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public Device metro(DeviceMetro metro) {
    
    this.metro = metro;
    return this;
  }

   /**
   * Get metro
   * @return metro
  **/
  @javax.annotation.Nullable

  public DeviceMetro getMetro() {
    return metro;
  }


  public void setMetro(DeviceMetro metro) {
    this.metro = metro;
  }


  public Device networkFrozen(Boolean networkFrozen) {
    
    this.networkFrozen = networkFrozen;
    return this;
  }

   /**
   * Whether network mode changes such as converting to/from Layer2 or Layer3 networking, bonding or disbonding network interfaces are permitted for the device.
   * @return networkFrozen
  **/
  @javax.annotation.Nullable

  public Boolean getNetworkFrozen() {
    return networkFrozen;
  }


  public void setNetworkFrozen(Boolean networkFrozen) {
    this.networkFrozen = networkFrozen;
  }


  public Device networkPorts(List<Port> networkPorts) {
    
    this.networkPorts = networkPorts;
    return this;
  }

  public Device addNetworkPortsItem(Port networkPortsItem) {
    if (this.networkPorts == null) {
      this.networkPorts = new ArrayList<>();
    }
    this.networkPorts.add(networkPortsItem);
    return this;
  }

   /**
   * By default, servers at Equinix Metal are configured in a “bonded” mode using LACP (Link Aggregation Control Protocol). Each 2-NIC server is configured with a single bond (namely bond0) with both interfaces eth0 and eth1 as members of the bond in a default Layer 3 mode. Some device plans may have a different number of ports and bonds available.
   * @return networkPorts
  **/
  @javax.annotation.Nullable

  public List<Port> getNetworkPorts() {
    return networkPorts;
  }


  public void setNetworkPorts(List<Port> networkPorts) {
    this.networkPorts = networkPorts;
  }


  public Device operatingSystem(OperatingSystem operatingSystem) {
    
    this.operatingSystem = operatingSystem;
    return this;
  }

   /**
   * Get operatingSystem
   * @return operatingSystem
  **/
  @javax.annotation.Nullable

  public OperatingSystem getOperatingSystem() {
    return operatingSystem;
  }


  public void setOperatingSystem(OperatingSystem operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public Device actions(List<DeviceActionsInner> actions) {
    
    this.actions = actions;
    return this;
  }

  public Device addActionsItem(DeviceActionsInner actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * Actions supported by the device instance.
   * @return actions
  **/
  @javax.annotation.Nullable

  public List<DeviceActionsInner> getActions() {
    return actions;
  }


  public void setActions(List<DeviceActionsInner> actions) {
    this.actions = actions;
  }


  public Device plan(Plan plan) {
    
    this.plan = plan;
    return this;
  }

   /**
   * Get plan
   * @return plan
  **/
  @javax.annotation.Nullable

  public Plan getPlan() {
    return plan;
  }


  public void setPlan(Plan plan) {
    this.plan = plan;
  }


  public Device project(DeviceProject project) {
    
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @javax.annotation.Nullable

  public DeviceProject getProject() {
    return project;
  }


  public void setProject(DeviceProject project) {
    this.project = project;
  }


  public Device projectLite(DeviceProjectLite projectLite) {
    
    this.projectLite = projectLite;
    return this;
  }

   /**
   * Get projectLite
   * @return projectLite
  **/
  @javax.annotation.Nullable

  public DeviceProjectLite getProjectLite() {
    return projectLite;
  }


  public void setProjectLite(DeviceProjectLite projectLite) {
    this.projectLite = projectLite;
  }


  public Device provisioningEvents(List<Event> provisioningEvents) {
    
    this.provisioningEvents = provisioningEvents;
    return this;
  }

  public Device addProvisioningEventsItem(Event provisioningEventsItem) {
    if (this.provisioningEvents == null) {
      this.provisioningEvents = new ArrayList<>();
    }
    this.provisioningEvents.add(provisioningEventsItem);
    return this;
  }

   /**
   * Get provisioningEvents
   * @return provisioningEvents
  **/
  @javax.annotation.Nullable

  public List<Event> getProvisioningEvents() {
    return provisioningEvents;
  }


  public void setProvisioningEvents(List<Event> provisioningEvents) {
    this.provisioningEvents = provisioningEvents;
  }


  public Device provisioningPercentage(Float provisioningPercentage) {
    
    this.provisioningPercentage = provisioningPercentage;
    return this;
  }

   /**
   * Only visible while device provisioning
   * @return provisioningPercentage
  **/
  @javax.annotation.Nullable

  public Float getProvisioningPercentage() {
    return provisioningPercentage;
  }


  public void setProvisioningPercentage(Float provisioningPercentage) {
    this.provisioningPercentage = provisioningPercentage;
  }


  public Device rootPassword(String rootPassword) {
    
    this.rootPassword = rootPassword;
    return this;
  }

   /**
   * Root password is automatically generated when server is provisioned and it is removed after 24 hours
   * @return rootPassword
  **/
  @javax.annotation.Nullable

  public String getRootPassword() {
    return rootPassword;
  }


  public void setRootPassword(String rootPassword) {
    this.rootPassword = rootPassword;
  }


  public Device shortId(String shortId) {
    
    this.shortId = shortId;
    return this;
  }

   /**
   * Get shortId
   * @return shortId
  **/
  @javax.annotation.Nullable

  public String getShortId() {
    return shortId;
  }


  public void setShortId(String shortId) {
    this.shortId = shortId;
  }


  public Device spotInstance(Boolean spotInstance) {
    
    this.spotInstance = spotInstance;
    return this;
  }

   /**
   * Whether or not the device is a spot instance.
   * @return spotInstance
  **/
  @javax.annotation.Nullable

  public Boolean getSpotInstance() {
    return spotInstance;
  }


  public void setSpotInstance(Boolean spotInstance) {
    this.spotInstance = spotInstance;
  }


  public Device spotPriceMax(Float spotPriceMax) {
    
    this.spotPriceMax = spotPriceMax;
    return this;
  }

   /**
   * The maximum price per hour you are willing to pay to keep this spot instance.  If you are outbid, the termination will be set allowing two minutes before shutdown.
   * @return spotPriceMax
  **/
  @javax.annotation.Nullable

  public Float getSpotPriceMax() {
    return spotPriceMax;
  }


  public void setSpotPriceMax(Float spotPriceMax) {
    this.spotPriceMax = spotPriceMax;
  }


  public Device sshKeys(List<Href> sshKeys) {
    
    this.sshKeys = sshKeys;
    return this;
  }

  public Device addSshKeysItem(Href sshKeysItem) {
    if (this.sshKeys == null) {
      this.sshKeys = new ArrayList<>();
    }
    this.sshKeys.add(sshKeysItem);
    return this;
  }

   /**
   * Get sshKeys
   * @return sshKeys
  **/
  @javax.annotation.Nullable

  public List<Href> getSshKeys() {
    return sshKeys;
  }


  public void setSshKeys(List<Href> sshKeys) {
    this.sshKeys = sshKeys;
  }


  public Device state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * The current state the instance is in.  * When an instance is initially created it will be in the &#x60;queued&#x60; state until it is picked up by the provisioner. * Once provisioning has begun on the instance it&#39;s state will move to &#x60;provisioning&#x60;. * When an instance is deleted, it will move to &#x60;deprovisioning&#x60; state until the deprovision is completed and the instance state moves to &#x60;deleted&#x60;. * If an instance fails to provision or deprovision it will move to &#x60;failed&#x60; state. * Once an instance has completed provisioning it will move to &#x60;active&#x60; state. * If an instance is currently powering off or powering on it will move to &#x60;powering_off&#x60; or &#x60;powering_on&#x60; states respectively.  * When the instance is powered off completely it will move to the &#x60;inactive&#x60; state. * When an instance is powered on completely it will move to the &#x60;active&#x60; state. * Using the reinstall action to install a new OS on the instance will cause the instance state to change to &#x60;reinstalling&#x60;. * When the reinstall action is complete the instance will move to &#x60;active&#x60; state.
   * @return state
  **/
  @javax.annotation.Nullable

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


  public Device storage(Storage storage) {
    
    this.storage = storage;
    return this;
  }

   /**
   * Get storage
   * @return storage
  **/
  @javax.annotation.Nullable

  public Storage getStorage() {
    return storage;
  }


  public void setStorage(Storage storage) {
    this.storage = storage;
  }


  public Device switchUuid(String switchUuid) {
    
    this.switchUuid = switchUuid;
    return this;
  }

   /**
   * Switch short id. This can be used to determine if two devices are connected to the same switch, for example.
   * @return switchUuid
  **/
  @javax.annotation.Nullable

  public String getSwitchUuid() {
    return switchUuid;
  }


  public void setSwitchUuid(String switchUuid) {
    this.switchUuid = switchUuid;
  }


  public Device tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public Device addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public Device terminationTime(OffsetDateTime terminationTime) {
    
    this.terminationTime = terminationTime;
    return this;
  }

   /**
   * When the device will be terminated. If you don&#39;t supply timezone info, the timestamp is assumed to be in UTC.  This is commonly set in advance for ephemeral spot market instances but this field may also be set with on-demand and reservation instances to automatically delete the resource at a given time. The termination time can also be used to release a hardware reservation instance at a given time, keeping the reservation open for other uses.  On a spot market device, the termination time will be set automatically when outbid.
   * @return terminationTime
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getTerminationTime() {
    return terminationTime;
  }


  public void setTerminationTime(OffsetDateTime terminationTime) {
    this.terminationTime = terminationTime;
  }


  public Device updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Device user(String user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable

  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    this.user = user;
  }


  public Device userdata(String userdata) {
    
    this.userdata = userdata;
    return this;
  }

   /**
   * Get userdata
   * @return userdata
  **/
  @javax.annotation.Nullable

  public String getUserdata() {
    return userdata;
  }


  public void setUserdata(String userdata) {
    this.userdata = userdata;
  }


  public Device volumes(List<Href> volumes) {
    
    this.volumes = volumes;
    return this;
  }

  public Device addVolumesItem(Href volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

   /**
   * Get volumes
   * @return volumes
  **/
  @javax.annotation.Nullable

  public List<Href> getVolumes() {
    return volumes;
  }


  public void setVolumes(List<Href> volumes) {
    this.volumes = volumes;
  }


  public Device sos(String sos) {
    
    this.sos = sos;
    return this;
  }

   /**
   * Hostname used to connect to the instance via the SOS (Serial over SSH) out-of-band console.
   * @return sos
  **/
  @javax.annotation.Nullable

  public String getSos() {
    return sos;
  }


  public void setSos(String sos) {
    this.sos = sos;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Device instance itself
   */
  public Device putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Device device = (Device) o;
    return Objects.equals(this.alwaysPxe, device.alwaysPxe) &&
        Objects.equals(this.billingCycle, device.billingCycle) &&
        Objects.equals(this.bondingMode, device.bondingMode) &&
        Objects.equals(this.createdAt, device.createdAt) &&
        Objects.equals(this.createdBy, device.createdBy) &&
        Objects.equals(this.customdata, device.customdata) &&
        Objects.equals(this.description, device.description) &&
        Objects.equals(this.facility, device.facility) &&
        Objects.equals(this.hardwareReservation, device.hardwareReservation) &&
        Objects.equals(this.hostname, device.hostname) &&
        Objects.equals(this.href, device.href) &&
        Objects.equals(this.id, device.id) &&
        Objects.equals(this.imageUrl, device.imageUrl) &&
        Objects.equals(this.ipAddresses, device.ipAddresses) &&
        Objects.equals(this.ipxeScriptUrl, device.ipxeScriptUrl) &&
        Objects.equals(this.iqn, device.iqn) &&
        Objects.equals(this.locked, device.locked) &&
        Objects.equals(this.metro, device.metro) &&
        Objects.equals(this.networkFrozen, device.networkFrozen) &&
        Objects.equals(this.networkPorts, device.networkPorts) &&
        Objects.equals(this.operatingSystem, device.operatingSystem) &&
        Objects.equals(this.actions, device.actions) &&
        Objects.equals(this.plan, device.plan) &&
        Objects.equals(this.project, device.project) &&
        Objects.equals(this.projectLite, device.projectLite) &&
        Objects.equals(this.provisioningEvents, device.provisioningEvents) &&
        Objects.equals(this.provisioningPercentage, device.provisioningPercentage) &&
        Objects.equals(this.rootPassword, device.rootPassword) &&
        Objects.equals(this.shortId, device.shortId) &&
        Objects.equals(this.spotInstance, device.spotInstance) &&
        Objects.equals(this.spotPriceMax, device.spotPriceMax) &&
        Objects.equals(this.sshKeys, device.sshKeys) &&
        Objects.equals(this.state, device.state) &&
        Objects.equals(this.storage, device.storage) &&
        Objects.equals(this.switchUuid, device.switchUuid) &&
        Objects.equals(this.tags, device.tags) &&
        Objects.equals(this.terminationTime, device.terminationTime) &&
        Objects.equals(this.updatedAt, device.updatedAt) &&
        Objects.equals(this.user, device.user) &&
        Objects.equals(this.userdata, device.userdata) &&
        Objects.equals(this.volumes, device.volumes) &&
        Objects.equals(this.sos, device.sos)&&
        Objects.equals(this.additionalProperties, device.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alwaysPxe, billingCycle, bondingMode, createdAt, createdBy, customdata, description, facility, hardwareReservation, hostname, href, id, imageUrl, ipAddresses, ipxeScriptUrl, iqn, locked, metro, networkFrozen, networkPorts, operatingSystem, actions, plan, project, projectLite, provisioningEvents, provisioningPercentage, rootPassword, shortId, spotInstance, spotPriceMax, sshKeys, state, storage, switchUuid, tags, terminationTime, updatedAt, user, userdata, volumes, sos, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Device {\n");
    sb.append("    alwaysPxe: ").append(toIndentedString(alwaysPxe)).append("\n");
    sb.append("    billingCycle: ").append(toIndentedString(billingCycle)).append("\n");
    sb.append("    bondingMode: ").append(toIndentedString(bondingMode)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    customdata: ").append(toIndentedString(customdata)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    facility: ").append(toIndentedString(facility)).append("\n");
    sb.append("    hardwareReservation: ").append(toIndentedString(hardwareReservation)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    ipAddresses: ").append(toIndentedString(ipAddresses)).append("\n");
    sb.append("    ipxeScriptUrl: ").append(toIndentedString(ipxeScriptUrl)).append("\n");
    sb.append("    iqn: ").append(toIndentedString(iqn)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    metro: ").append(toIndentedString(metro)).append("\n");
    sb.append("    networkFrozen: ").append(toIndentedString(networkFrozen)).append("\n");
    sb.append("    networkPorts: ").append(toIndentedString(networkPorts)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    projectLite: ").append(toIndentedString(projectLite)).append("\n");
    sb.append("    provisioningEvents: ").append(toIndentedString(provisioningEvents)).append("\n");
    sb.append("    provisioningPercentage: ").append(toIndentedString(provisioningPercentage)).append("\n");
    sb.append("    rootPassword: ").append(toIndentedString(rootPassword)).append("\n");
    sb.append("    shortId: ").append(toIndentedString(shortId)).append("\n");
    sb.append("    spotInstance: ").append(toIndentedString(spotInstance)).append("\n");
    sb.append("    spotPriceMax: ").append(toIndentedString(spotPriceMax)).append("\n");
    sb.append("    sshKeys: ").append(toIndentedString(sshKeys)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("    switchUuid: ").append(toIndentedString(switchUuid)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    terminationTime: ").append(toIndentedString(terminationTime)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userdata: ").append(toIndentedString(userdata)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("    sos: ").append(toIndentedString(sos)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("always_pxe");
    openapiFields.add("billing_cycle");
    openapiFields.add("bonding_mode");
    openapiFields.add("created_at");
    openapiFields.add("created_by");
    openapiFields.add("customdata");
    openapiFields.add("description");
    openapiFields.add("facility");
    openapiFields.add("hardware_reservation");
    openapiFields.add("hostname");
    openapiFields.add("href");
    openapiFields.add("id");
    openapiFields.add("image_url");
    openapiFields.add("ip_addresses");
    openapiFields.add("ipxe_script_url");
    openapiFields.add("iqn");
    openapiFields.add("locked");
    openapiFields.add("metro");
    openapiFields.add("network_frozen");
    openapiFields.add("network_ports");
    openapiFields.add("operating_system");
    openapiFields.add("actions");
    openapiFields.add("plan");
    openapiFields.add("project");
    openapiFields.add("project_lite");
    openapiFields.add("provisioning_events");
    openapiFields.add("provisioning_percentage");
    openapiFields.add("root_password");
    openapiFields.add("short_id");
    openapiFields.add("spot_instance");
    openapiFields.add("spot_price_max");
    openapiFields.add("ssh_keys");
    openapiFields.add("state");
    openapiFields.add("storage");
    openapiFields.add("switch_uuid");
    openapiFields.add("tags");
    openapiFields.add("termination_time");
    openapiFields.add("updated_at");
    openapiFields.add("user");
    openapiFields.add("userdata");
    openapiFields.add("volumes");
    openapiFields.add("sos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Device
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Device.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Device is not found in the empty JSON string", Device.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("billing_cycle") != null && !jsonObj.get("billing_cycle").isJsonNull()) && !jsonObj.get("billing_cycle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_cycle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_cycle").toString()));
      }
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        DeviceCreatedBy.validateJsonObject(jsonObj.getAsJsonObject("created_by"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `facility`
      if (jsonObj.get("facility") != null && !jsonObj.get("facility").isJsonNull()) {
        Facility.validateJsonObject(jsonObj.getAsJsonObject("facility"));
      }
      // validate the optional field `hardware_reservation`
      if (jsonObj.get("hardware_reservation") != null && !jsonObj.get("hardware_reservation").isJsonNull()) {
        HardwareReservation.validateJsonObject(jsonObj.getAsJsonObject("hardware_reservation"));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if (jsonObj.get("ip_addresses") != null && !jsonObj.get("ip_addresses").isJsonNull()) {
        JsonArray jsonArrayipAddresses = jsonObj.getAsJsonArray("ip_addresses");
        if (jsonArrayipAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ip_addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ip_addresses` to be an array in the JSON string but got `%s`", jsonObj.get("ip_addresses").toString()));
          }

          // validate the optional field `ip_addresses` (array)
          for (int i = 0; i < jsonArrayipAddresses.size(); i++) {
            IPAssignment.validateJsonObject(jsonArrayipAddresses.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("ipxe_script_url") != null && !jsonObj.get("ipxe_script_url").isJsonNull()) && !jsonObj.get("ipxe_script_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipxe_script_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipxe_script_url").toString()));
      }
      if ((jsonObj.get("iqn") != null && !jsonObj.get("iqn").isJsonNull()) && !jsonObj.get("iqn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iqn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iqn").toString()));
      }
      // validate the optional field `metro`
      if (jsonObj.get("metro") != null && !jsonObj.get("metro").isJsonNull()) {
        DeviceMetro.validateJsonObject(jsonObj.getAsJsonObject("metro"));
      }
      if (jsonObj.get("network_ports") != null && !jsonObj.get("network_ports").isJsonNull()) {
        JsonArray jsonArraynetworkPorts = jsonObj.getAsJsonArray("network_ports");
        if (jsonArraynetworkPorts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("network_ports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `network_ports` to be an array in the JSON string but got `%s`", jsonObj.get("network_ports").toString()));
          }

          // validate the optional field `network_ports` (array)
          for (int i = 0; i < jsonArraynetworkPorts.size(); i++) {
            Port.validateJsonObject(jsonArraynetworkPorts.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `operating_system`
      if (jsonObj.get("operating_system") != null && !jsonObj.get("operating_system").isJsonNull()) {
        OperatingSystem.validateJsonObject(jsonObj.getAsJsonObject("operating_system"));
      }
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            DeviceActionsInner.validateJsonObject(jsonArrayactions.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `plan`
      if (jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) {
        Plan.validateJsonObject(jsonObj.getAsJsonObject("plan"));
      }
      // validate the optional field `project`
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        DeviceProject.validateJsonObject(jsonObj.getAsJsonObject("project"));
      }
      // validate the optional field `project_lite`
      if (jsonObj.get("project_lite") != null && !jsonObj.get("project_lite").isJsonNull()) {
        DeviceProjectLite.validateJsonObject(jsonObj.getAsJsonObject("project_lite"));
      }
      if (jsonObj.get("provisioning_events") != null && !jsonObj.get("provisioning_events").isJsonNull()) {
        JsonArray jsonArrayprovisioningEvents = jsonObj.getAsJsonArray("provisioning_events");
        if (jsonArrayprovisioningEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("provisioning_events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `provisioning_events` to be an array in the JSON string but got `%s`", jsonObj.get("provisioning_events").toString()));
          }

          // validate the optional field `provisioning_events` (array)
          for (int i = 0; i < jsonArrayprovisioningEvents.size(); i++) {
            Event.validateJsonObject(jsonArrayprovisioningEvents.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("root_password") != null && !jsonObj.get("root_password").isJsonNull()) && !jsonObj.get("root_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `root_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("root_password").toString()));
      }
      if ((jsonObj.get("short_id") != null && !jsonObj.get("short_id").isJsonNull()) && !jsonObj.get("short_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_id").toString()));
      }
      if (jsonObj.get("ssh_keys") != null && !jsonObj.get("ssh_keys").isJsonNull()) {
        JsonArray jsonArraysshKeys = jsonObj.getAsJsonArray("ssh_keys");
        if (jsonArraysshKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ssh_keys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ssh_keys` to be an array in the JSON string but got `%s`", jsonObj.get("ssh_keys").toString()));
          }

          // validate the optional field `ssh_keys` (array)
          for (int i = 0; i < jsonArraysshKeys.size(); i++) {
            Href.validateJsonObject(jsonArraysshKeys.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `storage`
      if (jsonObj.get("storage") != null && !jsonObj.get("storage").isJsonNull()) {
        Storage.validateJsonObject(jsonObj.getAsJsonObject("storage"));
      }
      if ((jsonObj.get("switch_uuid") != null && !jsonObj.get("switch_uuid").isJsonNull()) && !jsonObj.get("switch_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `switch_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("switch_uuid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if ((jsonObj.get("userdata") != null && !jsonObj.get("userdata").isJsonNull()) && !jsonObj.get("userdata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userdata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userdata").toString()));
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            Href.validateJsonObject(jsonArrayvolumes.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("sos") != null && !jsonObj.get("sos").isJsonNull()) && !jsonObj.get("sos").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sos` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sos").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Device.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Device' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Device> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Device.class));

       return (TypeAdapter<T>) new TypeAdapter<Device>() {
           @Override
           public void write(JsonWriter out, Device value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Device read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Device instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Device given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Device
  * @throws IOException if the JSON string is invalid with respect to Device
  */
  public static Device fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Device.class);
  }

 /**
  * Convert an instance of Device to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

