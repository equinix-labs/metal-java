/*
 * Metal API
 * # Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. The fields available for search differ by resource, as does the search strategy.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonElement;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;

import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.HashMap;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
    private static Gson gson;
    private static boolean isLenientOnJson = false;
    private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    {
        GsonBuilder gsonBuilder = createGson();
        gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
        gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
        gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.ActivateHardwareReservationRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Address.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.AuthToken.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.AuthTokenInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.AuthTokenList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.AuthTokenProject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.AuthTokenUser.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.BGPSessionInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Batch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.BatchesList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.BgpConfig.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.BgpConfigRequestInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.BgpDynamicNeighbor.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.BgpDynamicNeighborCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.BgpDynamicNeighborList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.BgpNeighborData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.BgpRoute.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.BgpSession.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.BgpSessionList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.BgpSessionNeighbors.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.BondPortData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.CapacityCheckPerFacilityInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.CapacityCheckPerFacilityList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.CapacityCheckPerMetroInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.CapacityCheckPerMetroList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.CapacityInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.CapacityLevelPerBaremetal.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.CapacityList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Coordinates.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.CreateDeviceRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.CreateEmailInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.CreateMetalGatewayRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.CreateSelfServiceReservationRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.CreateSelfServiceReservationRequestPeriod.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Device.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.DeviceActionInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.DeviceActionsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.DeviceCreateInFacilityInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.DeviceCreateInMetroInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.DeviceCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.DeviceCreatedBy.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.DeviceList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.DeviceMetro.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.DeviceProject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.DeviceProjectLite.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.DeviceUpdateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.DeviceUsage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.DeviceUsageList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Email.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.EmailInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Entitlement.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Error.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Event.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.EventList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.FabricServiceToken.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Facility.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.FacilityInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.FacilityList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.FindIPAddressById200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.FindMetalGatewayById200Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.FindTrafficTimeframeParameter.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.GlobalBgpRange.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.GlobalBgpRangeList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.HardwareReservation.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.HardwareReservationList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Href.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.IPAddress.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.IPAssignment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.IPAssignmentInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.IPAssignmentList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.IPAssignmentMetro.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.IPAssignmentUpdateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.IPAvailabilitiesList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.IPReservation.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.IPReservationFacility.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.IPReservationList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.IPReservationListIpAddressesInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.IPReservationMetro.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.IPReservationOrHref.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.IPReservationRequestInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.InstancesBatchCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.InstancesBatchCreateInputBatchesInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.InstancesBatchCreateInputBatchesInnerAllOf.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Interconnection.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.InterconnectionCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.InterconnectionList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.InterconnectionMetro.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.InterconnectionPort.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.InterconnectionPortCore.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.InterconnectionPortList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.InterconnectionUpdateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Invitation.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.InvitationInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.InvitationList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Invoice.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.InvoiceList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.License.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.LicenseCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.LicenseList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.LicenseUpdateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.LineItem.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Membership.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.MembershipInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.MembershipList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Meta.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Metadata.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.MetadataNetwork.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.MetadataNetworkNetwork.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.MetadataNetworkNetworkBonding.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.MetalGateway.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.MetalGatewayCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.MetalGatewayElasticIpCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.MetalGatewayList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.MetalGatewayListMetalGatewaysInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.MetalGatewayLite.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Metro.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.MetroInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.MetroList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.MoveHardwareReservationRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.NewPassword.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.OperatingSystem.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.OperatingSystemList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Organization.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.OrganizationInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.OrganizationList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.ParentBlock.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PaymentMethod.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PaymentMethodBillingAddress.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PaymentMethodCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PaymentMethodList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PaymentMethodUpdateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Plan.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PlanAvailableInInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PlanAvailableInInnerPrice.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PlanAvailableInMetrosInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PlanList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PlanSpecs.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PlanSpecsCpusInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PlanSpecsDrivesInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PlanSpecsFeatures.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PlanSpecsMemory.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PlanSpecsNicsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Port.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PortAssignInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PortConvertLayer3Input.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PortConvertLayer3InputRequestIpsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PortData.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PortVlanAssignment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PortVlanAssignmentBatch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PortVlanAssignmentBatchCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PortVlanAssignmentBatchCreateInputVlanAssignmentsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PortVlanAssignmentBatchList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PortVlanAssignmentBatchVlanAssignmentsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.PortVlanAssignmentList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Project.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.ProjectCreateFromRootInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.ProjectCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.ProjectIdName.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.ProjectList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.ProjectUpdateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.ProjectUsage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.ProjectUsageList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.RecoveryCodeList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.RequestIPReservation201Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.RequestIPReservationRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SSHKey.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SSHKeyCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SSHKeyInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SSHKeyList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SelfServiceReservationItemRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SelfServiceReservationItemResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SelfServiceReservationList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SelfServiceReservationResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.ServerInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SpotMarketPricesList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SpotMarketPricesPerMetroList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SpotMarketPricesPerMetroReport.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SpotMarketRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SpotMarketRequestCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SpotMarketRequestCreateInputInstanceParameters.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SpotMarketRequestList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SpotMarketRequestMetro.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SpotPricesDatapoints.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SpotPricesHistoryReport.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SpotPricesPerBaremetal.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SpotPricesPerFacility.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SpotPricesPerNewFacility.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SpotPricesReport.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.SupportRequestInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.TransferRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.TransferRequestInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.TransferRequestList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.UpdateEmailInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.User.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.UserCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.UserLimited.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.UserList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.UserLite.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.UserUpdateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Userdata.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VerifyEmail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VirtualCircuit.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VirtualCircuitCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VirtualCircuitList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VirtualCircuitUpdateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VirtualNetwork.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VirtualNetworkCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VirtualNetworkList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VlanVirtualCircuit.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VlanVirtualCircuitCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VlanVirtualCircuitUpdateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.Vrf.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VrfCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VrfIpReservation.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VrfIpReservationCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VrfIpReservationList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VrfIpReservationOrHref.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VrfList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VrfMetalGateway.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VrfMetalGatewayCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VrfRoute.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VrfRouteCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VrfRouteList.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VrfRouteUpdateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VrfUpdateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VrfVirtualCircuit.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VrfVirtualCircuitCreateInput.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.equinix.openapi.metal.v1.model.VrfVirtualCircuitUpdateInput.CustomTypeAdapterFactory());
        gson = gsonBuilder.create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public static Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     */
    public static void setGson(Gson gson) {
        JSON.gson = gson;
    }

    public static void setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public static String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public static <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
    }

    public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public static void setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
    }

    public static void setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
    }
}
