/*
 * Metal API
 * # Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. Currently the search parameter is only available on devices, ssh_keys, api_keys and memberships endpoints.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.ApiException;
import com.equinix.openapi.metal.v1.model.Error;
import com.equinix.openapi.metal.v1.model.Invitation;
import com.equinix.openapi.metal.v1.model.InvitationInput;
import com.equinix.openapi.metal.v1.model.InvitationList;
import com.equinix.openapi.metal.v1.model.OperatingSystemList;
import com.equinix.openapi.metal.v1.model.Organization;
import com.equinix.openapi.metal.v1.model.OrganizationInput;
import com.equinix.openapi.metal.v1.model.OrganizationList;
import com.equinix.openapi.metal.v1.model.PaymentMethod;
import com.equinix.openapi.metal.v1.model.PaymentMethodCreateInput;
import com.equinix.openapi.metal.v1.model.PaymentMethodList;
import com.equinix.openapi.metal.v1.model.PlanList;
import com.equinix.openapi.metal.v1.model.Project;
import com.equinix.openapi.metal.v1.model.ProjectCreateInput;
import com.equinix.openapi.metal.v1.model.ProjectList;
import com.equinix.openapi.metal.v1.model.TransferRequestList;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationsApi
 */
@Disabled
public class OrganizationsApiTest {

    private final OrganizationsApi api = new OrganizationsApi();

    /**
     * Create an organization
     *
     * Creates an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationTest() throws ApiException {
        OrganizationInput organizationInput = null;
        List<String> include = null;
        List<String> exclude = null;
        Organization response = api.createOrganization(organizationInput, include, exclude);
        // TODO: test validations
    }

    /**
     * Create an invitation for an organization
     *
     * In order to add a user to an organization, they must first be invited. To invite to several projects the parameter &#x60;projects_ids:[a,b,c]&#x60; can be used
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationInvitationTest() throws ApiException {
        UUID id = null;
        InvitationInput invitationInput = null;
        List<String> include = null;
        Invitation response = api.createOrganizationInvitation(id, invitationInput, include);
        // TODO: test validations
    }

    /**
     * Create a project for the organization
     *
     * Creates a new project for the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationProjectTest() throws ApiException {
        UUID id = null;
        ProjectCreateInput projectCreateInput = null;
        List<String> include = null;
        List<String> exclude = null;
        Project response = api.createOrganizationProject(id, projectCreateInput, include, exclude);
        // TODO: test validations
    }

    /**
     * Create a payment method for the given organization
     *
     * Creates a payment method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentMethodTest() throws ApiException {
        UUID id = null;
        PaymentMethodCreateInput paymentMethodCreateInput = null;
        List<String> include = null;
        PaymentMethod response = api.createPaymentMethod(id, paymentMethodCreateInput, include);
        // TODO: test validations
    }

    /**
     * Delete the organization
     *
     * Deletes the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationTest() throws ApiException {
        UUID id = null;
        api.deleteOrganization(id);
        // TODO: test validations
    }

    /**
     * Retrieve all operating systems visible by the organization
     *
     * Returns a listing of available operating systems for the given organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOperatingSystemsByOrganizationTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        OperatingSystemList response = api.findOperatingSystemsByOrganization(id, include);
        // TODO: test validations
    }

    /**
     * Retrieve an organization&#39;s details
     *
     * Returns a single organization&#39;s details, if the user is authorized to view it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationByIdTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Organization response = api.findOrganizationById(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve the custom metadata of an organization
     *
     * Provides the custom metadata stored for this organization in json format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationCustomdataTest() throws ApiException {
        UUID id = null;
        api.findOrganizationCustomdata(id);
        // TODO: test validations
    }

    /**
     * Retrieve organization invitations
     *
     * Returns all invitations in an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationInvitationsTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        Integer page = null;
        Integer perPage = null;
        InvitationList response = api.findOrganizationInvitations(id, include, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve all payment methods of an organization
     *
     * Returns all payment methods of an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationPaymentMethodsTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        Integer page = null;
        Integer perPage = null;
        PaymentMethodList response = api.findOrganizationPaymentMethods(id, include, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve all projects of an organization
     *
     * Returns a collection of projects that belong to the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationProjectsTest() throws ApiException {
        UUID id = null;
        String name = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        ProjectList response = api.findOrganizationProjects(id, name, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve all project transfer requests from or to an organization
     *
     * Provides a collection of project transfer requests from or to the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationTransfersTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        TransferRequestList response = api.findOrganizationTransfers(id, include);
        // TODO: test validations
    }

    /**
     * Retrieve all organizations
     *
     * Returns a list of organizations that are accessible to the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationsTest() throws ApiException {
        String personal = null;
        String withoutProjects = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        OrganizationList response = api.findOrganizations(personal, withoutProjects, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve all plans visible by the organization
     *
     * Returns a listing of available plans for the given organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findPlansByOrganizationTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        PlanList response = api.findPlansByOrganization(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Update the organization
     *
     * Updates the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationTest() throws ApiException {
        UUID id = null;
        OrganizationInput organizationInput = null;
        List<String> include = null;
        List<String> exclude = null;
        Organization response = api.updateOrganization(id, organizationInput, include, exclude);
        // TODO: test validations
    }

}
