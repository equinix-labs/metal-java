/*
 * Metal API
 * # Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. The fields available for search differ by resource, as does the search strategy.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.ApiException;
import com.equinix.openapi.metal.v1.model.Error;
import com.equinix.openapi.metal.v1.model.Invitation;
import com.equinix.openapi.metal.v1.model.InvitationInput;
import com.equinix.openapi.metal.v1.model.InvitationList;
import com.equinix.openapi.metal.v1.model.MembershipList;
import com.equinix.openapi.metal.v1.model.Project;
import com.equinix.openapi.metal.v1.model.ProjectCreateFromRootInput;
import com.equinix.openapi.metal.v1.model.ProjectList;
import com.equinix.openapi.metal.v1.model.ProjectUpdateInput;
import com.equinix.openapi.metal.v1.model.TransferRequest;
import com.equinix.openapi.metal.v1.model.TransferRequestInput;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Create a project
     *
     * Creates a new project for the user default organization. If the user don&#39;t have an organization, a new one will be created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        ProjectCreateFromRootInput projectCreateFromRootInput = null;
        List<String> include = null;
        List<String> exclude = null;
        Project response = api.createProject(projectCreateFromRootInput, include, exclude);
        // TODO: test validations
    }

    /**
     * Create an invitation for a project
     *
     * In order to add a user to a project, they must first be invited.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectInvitationTest() throws ApiException {
        UUID projectId = null;
        InvitationInput invitationInput = null;
        Invitation response = api.createProjectInvitation(projectId, invitationInput);
        // TODO: test validations
    }

    /**
     * Create a transfer request
     *
     * Organization owners can transfer their projects to other organizations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTransferRequestTest() throws ApiException {
        UUID id = null;
        TransferRequestInput transferRequestInput = null;
        TransferRequest response = api.createTransferRequest(id, transferRequestInput);
        // TODO: test validations
    }

    /**
     * Delete the project
     *
     * Deletes the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        UUID id = null;
        api.deleteProject(id);
        // TODO: test validations
    }

    /**
     * Retrieve the custom metadata of an IP Reservation
     *
     * Provides the custom metadata stored for this IP Reservation in json format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findIPReservationCustomdataTest() throws ApiException {
        UUID projectId = null;
        UUID id = null;
        api.findIPReservationCustomdata(projectId, id);
        // TODO: test validations
    }

    /**
     * Retrieve a project
     *
     * Returns a single project if the user has access
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findProjectByIdTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Project response = api.findProjectById(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve the custom metadata of a project
     *
     * Provides the custom metadata stored for this project in json format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findProjectCustomdataTest() throws ApiException {
        UUID id = null;
        api.findProjectCustomdata(id);
        // TODO: test validations
    }

    /**
     * Retrieve project invitations
     *
     * Returns all invitations in a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findProjectInvitationsTest() throws ApiException {
        UUID projectId = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InvitationList response = api.findProjectInvitations(projectId, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve project memberships
     *
     * Returns all memberships in a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findProjectMembershipsTest() throws ApiException {
        UUID projectId = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        MembershipList response = api.findProjectMemberships(projectId, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve all projects
     *
     * Returns a collection of projects that the current user is a member of.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findProjectsTest() throws ApiException {
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        ProjectList response = api.findProjects(include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Update the project
     *
     * Updates the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectTest() throws ApiException {
        UUID id = null;
        ProjectUpdateInput projectUpdateInput = null;
        Project response = api.updateProject(id, projectUpdateInput);
        // TODO: test validations
    }

}
