/*
 * Metal API
 * # Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. Currently the search parameter is only available on devices, ssh_keys, api_keys and memberships endpoints.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.ApiException;
import com.equinix.openapi.metal.v1.model.Error;
import com.equinix.openapi.metal.v1.model.Port;
import com.equinix.openapi.metal.v1.model.PortAssignInput;
import com.equinix.openapi.metal.v1.model.PortConvertLayer3Input;
import com.equinix.openapi.metal.v1.model.PortVlanAssignment;
import com.equinix.openapi.metal.v1.model.PortVlanAssignmentBatch;
import com.equinix.openapi.metal.v1.model.PortVlanAssignmentBatchCreateInput;
import com.equinix.openapi.metal.v1.model.PortVlanAssignmentBatchList;
import com.equinix.openapi.metal.v1.model.PortVlanAssignmentList;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PortsApi
 */
@Disabled
public class PortsApiTest {

    private final PortsApi api = new PortsApi();

    /**
     * Assign a native VLAN
     *
     * Sets a virtual network on this port as a \&quot;native VLAN\&quot;. The VLAN must have already been assigned using the using the \&quot;Assign a port to a virtual network\&quot; operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignNativeVlanTest() throws ApiException {
        UUID id = null;
        String vnid = null;
        List<String> include = null;
        Port response = api.assignNativeVlan(id, vnid, include);
        // TODO: test validations
    }

    /**
     * Assign a port to virtual network
     *
     * Assign a hardware port to a virtual network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignPortTest() throws ApiException {
        UUID id = null;
        PortAssignInput portAssignInput = null;
        List<String> include = null;
        Port response = api.assignPort(id, portAssignInput, include);
        // TODO: test validations
    }

    /**
     * Enabling bonding
     *
     * Enabling bonding for one or all ports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bondPortTest() throws ApiException {
        UUID id = null;
        Boolean bulkEnable = null;
        List<String> include = null;
        Port response = api.bondPort(id, bulkEnable, include);
        // TODO: test validations
    }

    /**
     * Convert to Layer 2
     *
     * Converts a bond port to Layer 2. IP assignments of the port will be removed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void convertLayer2Test() throws ApiException {
        UUID id = null;
        PortAssignInput portAssignInput = null;
        List<String> include = null;
        Port response = api.convertLayer2(id, portAssignInput, include);
        // TODO: test validations
    }

    /**
     * Convert to Layer 3
     *
     * Converts a bond port to Layer 3. VLANs must first be unassigned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void convertLayer3Test() throws ApiException {
        UUID id = null;
        List<String> include = null;
        PortConvertLayer3Input portConvertLayer3Input = null;
        Port response = api.convertLayer3(id, include, portConvertLayer3Input);
        // TODO: test validations
    }

    /**
     * Create a new Port-VLAN Assignment management batch
     *
     * Create a new asynchronous batch request which handles adding and/or removing the VLANs to which the port is assigned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPortVlanAssignmentBatchTest() throws ApiException {
        UUID id = null;
        PortVlanAssignmentBatchCreateInput portVlanAssignmentBatchCreateInput = null;
        List<String> include = null;
        PortVlanAssignmentBatch response = api.createPortVlanAssignmentBatch(id, portVlanAssignmentBatchCreateInput, include);
        // TODO: test validations
    }

    /**
     * Remove native VLAN
     *
     * Removes the native VLAN from this port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNativeVlanTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        Port response = api.deleteNativeVlan(id, include);
        // TODO: test validations
    }

    /**
     * Disabling bonding
     *
     * Disabling bonding for one or all ports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disbondPortTest() throws ApiException {
        UUID id = null;
        Boolean bulkDisable = null;
        List<String> include = null;
        Port response = api.disbondPort(id, bulkDisable, include);
        // TODO: test validations
    }

    /**
     * Retrieve a port
     *
     * Returns a port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findPortByIdTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        Port response = api.findPortById(id, include);
        // TODO: test validations
    }

    /**
     * Retrieve a VLAN Assignment Batch&#39;s details
     *
     * Returns the details of an existing Port-VLAN Assignment batch, including the list of VLANs to assign or unassign, and the current state of the batch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findPortVlanAssignmentBatchByPortIdAndBatchIdTest() throws ApiException {
        UUID id = null;
        UUID batchId = null;
        List<String> include = null;
        PortVlanAssignmentBatch response = api.findPortVlanAssignmentBatchByPortIdAndBatchId(id, batchId, include);
        // TODO: test validations
    }

    /**
     * List the VLAN Assignment Batches for a port
     *
     * Show all the VLAN assignment batches that have been created for managing this port&#39;s VLAN assignments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findPortVlanAssignmentBatchesTest() throws ApiException {
        UUID id = null;
        PortVlanAssignmentBatchList response = api.findPortVlanAssignmentBatches(id);
        // TODO: test validations
    }

    /**
     * Show a particular Port VLAN assignment&#39;s details
     *
     * Show the details of a specific Port-VLAN assignment, including the current state and if the VLAN is set as native.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findPortVlanAssignmentByPortIdAndAssignmentIdTest() throws ApiException {
        UUID id = null;
        UUID assignmentId = null;
        List<String> include = null;
        PortVlanAssignment response = api.findPortVlanAssignmentByPortIdAndAssignmentId(id, assignmentId, include);
        // TODO: test validations
    }

    /**
     * List Current VLAN assignments for a port
     *
     * Show the port&#39;s current VLAN assignments, including if this VLAN is set as native, and the current state of the assignment (ex. &#39;assigned&#39; or &#39;unassigning&#39;)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findPortVlanAssignmentsTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        PortVlanAssignmentList response = api.findPortVlanAssignments(id, include);
        // TODO: test validations
    }

    /**
     * Unassign a port
     *
     * Unassign a port for a hardware.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unassignPortTest() throws ApiException {
        UUID id = null;
        PortAssignInput portAssignInput = null;
        List<String> include = null;
        Port response = api.unassignPort(id, portAssignInput, include);
        // TODO: test validations
    }

}
