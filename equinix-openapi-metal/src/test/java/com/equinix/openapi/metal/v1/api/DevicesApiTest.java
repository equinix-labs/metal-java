/*
 * Metal API
 * # Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. Currently the search parameter is only available on devices, ssh_keys, api_keys and memberships endpoints.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.ApiException;
import com.equinix.openapi.metal.v1.model.BGPSessionInput;
import com.equinix.openapi.metal.v1.model.BgpSession;
import com.equinix.openapi.metal.v1.model.BgpSessionList;
import com.equinix.openapi.metal.v1.model.BgpSessionNeighbors;
import com.equinix.openapi.metal.v1.model.CreateDeviceRequest;
import com.equinix.openapi.metal.v1.model.Device;
import com.equinix.openapi.metal.v1.model.DeviceActionInput;
import com.equinix.openapi.metal.v1.model.DeviceHealthRollup;
import com.equinix.openapi.metal.v1.model.DeviceList;
import com.equinix.openapi.metal.v1.model.DeviceUpdateInput;
import com.equinix.openapi.metal.v1.model.Error;
import com.equinix.openapi.metal.v1.model.FindTrafficTimeframeParameter;
import com.equinix.openapi.metal.v1.model.FirmwareSetResponse;
import com.equinix.openapi.metal.v1.model.IPAssignment;
import com.equinix.openapi.metal.v1.model.IPAssignmentInput;
import com.equinix.openapi.metal.v1.model.IPAssignmentList;
import com.equinix.openapi.metal.v1.model.Metadata;
import java.util.UUID;
import com.equinix.openapi.metal.v1.model.Userdata;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Disabled
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    /**
     * Create a BGP session
     *
     * Creates a BGP session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBgpSessionTest() throws ApiException {
        UUID id = null;
        BGPSessionInput bgPSessionInput = null;
        List<String> include = null;
        BgpSession response = api.createBgpSession(id, bgPSessionInput, include);
        // TODO: test validations
    }

    /**
     * Create a device
     *
     * Creates a new device and provisions it in the specified location.  Device type-specific options are accepted.  For example, &#x60;baremetal&#x60; devices accept &#x60;operating_system&#x60;, &#x60;hostname&#x60;, and &#x60;plan&#x60;. These parameters may not be accepted for other device types. The default device type is &#x60;baremetal&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeviceTest() throws ApiException {
        UUID id = null;
        CreateDeviceRequest createDeviceRequest = null;
        List<String> include = null;
        List<String> exclude = null;
        Device response = api.createDevice(id, createDeviceRequest, include, exclude);
        // TODO: test validations
    }

    /**
     * Create an ip assignment
     *
     * Creates an ip assignment for a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIPAssignmentTest() throws ApiException {
        UUID id = null;
        IPAssignmentInput ipAssignmentInput = null;
        List<String> include = null;
        List<String> exclude = null;
        IPAssignment response = api.createIPAssignment(id, ipAssignmentInput, include, exclude);
        // TODO: test validations
    }

    /**
     * Delete the device
     *
     * Deletes a device and deprovisions it in our datacenter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeviceTest() throws ApiException {
        UUID id = null;
        Boolean forceDelete = null;
        api.deleteDevice(id, forceDelete);
        // TODO: test validations
    }

    /**
     * Retrieve all BGP sessions
     *
     * Provides a listing of available BGP sessions for the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findBgpSessionsTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        BgpSessionList response = api.findBgpSessions(id, include);
        // TODO: test validations
    }

    /**
     * Retrieve a device
     *
     * Type-specific options (such as facility for baremetal devices) will be included as part of the main data structure.                          State value can be one of: active inactive queued or provisioning
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findDeviceByIdTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Device response = api.findDeviceById(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve the custom metadata of an instance
     *
     * Provides the custom metadata stored for this instance in json format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findDeviceCustomdataTest() throws ApiException {
        UUID id = null;
        api.findDeviceCustomdata(id);
        // TODO: test validations
    }

    /**
     * Retrieve metadata
     *
     * Retrieve device metadata
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findDeviceMetadataByIDTest() throws ApiException {
        UUID id = null;
        Metadata response = api.findDeviceMetadataByID(id);
        // TODO: test validations
    }

    /**
     * Retrieve userdata
     *
     * Retrieve device userdata
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findDeviceUserdataByIDTest() throws ApiException {
        UUID id = null;
        Userdata response = api.findDeviceUserdataByID(id);
        // TODO: test validations
    }

    /**
     * Retrieve the custom metadata of an IP Assignment
     *
     * Provides the custom metadata stored for this IP Assignment in json format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findIPAssignmentCustomdataTest() throws ApiException {
        UUID instanceId = null;
        UUID id = null;
        api.findIPAssignmentCustomdata(instanceId, id);
        // TODO: test validations
    }

    /**
     * Retrieve all ip assignments
     *
     * Returns all ip assignments for a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findIPAssignmentsTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        IPAssignmentList response = api.findIPAssignments(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve an instance bandwidth
     *
     * Retrieve an instance bandwidth for a given period of time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findInstanceBandwidthTest() throws ApiException {
        UUID id = null;
        String from = null;
        String until = null;
        api.findInstanceBandwidth(id, from, until);
        // TODO: test validations
    }

    /**
     * Retrieve all devices of an organization
     *
     * Provides a collection of devices for a given organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationDevicesTest() throws ApiException {
        UUID id = null;
        String search = null;
        List<String> categories = null;
        String facility = null;
        String hostname = null;
        Boolean reserved = null;
        String tag = null;
        String type = null;
        Boolean hasTerminationTime = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        DeviceList response = api.findOrganizationDevices(id, search, categories, facility, hostname, reserved, tag, type, hasTerminationTime, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve all devices of a project
     *
     * Provides a collection of devices for a given project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findProjectDevicesTest() throws ApiException {
        UUID id = null;
        String search = null;
        List<String> categories = null;
        String facility = null;
        String hostname = null;
        Boolean reserved = null;
        String tag = null;
        String type = null;
        Boolean hasTerminationTime = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        DeviceList response = api.findProjectDevices(id, search, categories, facility, hostname, reserved, tag, type, hasTerminationTime, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve device traffic
     *
     * Returns traffic for a specific device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findTrafficTest() throws ApiException {
        UUID id = null;
        String direction = null;
        String interval = null;
        String bucket = null;
        FindTrafficTimeframeParameter timeframe = null;
        api.findTraffic(id, direction, interval, bucket, timeframe);
        // TODO: test validations
    }

    /**
     * Retrieve BGP neighbor data for this device
     *
     * Provides a summary of the BGP neighbor data associated to the BGP sessions for this device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBgpNeighborDataTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        BgpSessionNeighbors response = api.getBgpNeighborData(id, include);
        // TODO: test validations
    }

    /**
     * Get Device&#39;s associated Firmware Set
     *
     * Returns the firmware set associated with the device. If a custom firmware set is associated with the device, then it is returned. Otherwise, if a default firmware set is available it is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceFirmwareSetsTest() throws ApiException {
        UUID id = null;
        FirmwareSetResponse response = api.getDeviceFirmwareSets(id);
        // TODO: test validations
    }

    /**
     * Get Device&#39;s Health Status
     *
     * Returns the health rollup status of the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceHealthRollupTest() throws ApiException {
        UUID id = null;
        DeviceHealthRollup response = api.getDeviceHealthRollup(id);
        // TODO: test validations
    }

    /**
     * Perform an action
     *
     * Performs an action for the given device.  Possible actions include: power_on, power_off, reboot, reinstall, and rescue (reboot the device into rescue OS.)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performActionTest() throws ApiException {
        UUID id = null;
        DeviceActionInput deviceActionInput = null;
        api.performAction(id, deviceActionInput);
        // TODO: test validations
    }

    /**
     * Update the device
     *
     * Updates the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceTest() throws ApiException {
        UUID id = null;
        DeviceUpdateInput deviceUpdateInput = null;
        List<String> include = null;
        List<String> exclude = null;
        Device response = api.updateDevice(id, deviceUpdateInput, include, exclude);
        // TODO: test validations
    }

}
